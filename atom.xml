<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>C0debreak&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-09T13:53:31.148Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>P0tato</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文件包含漏洞分析</title>
    <link href="http://yoursite.com/2019/07/17/LFI/"/>
    <id>http://yoursite.com/2019/07/17/LFI/</id>
    <published>2019-07-17T12:36:57.641Z</published>
    <updated>2020-06-09T13:53:31.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-漏洞简介"><a href="#0x01-漏洞简介" class="headerlink" title="0x01 漏洞简介"></a>0x01 漏洞简介</h2><p>如果允许客户端输入控制动态包含在服务器端的文件，会导致恶意代码的执行与敏感信息的泄露。文件包含通常分为本地文件包含（<code>Local File Inclusion</code>）和远程文件包含(<code>Remote File Inclusion</code>)。<code>allow_url_fopen</code>和<code>allow_url_include</code>为on的情况认为是远程文件包含漏洞，<code>allow_url_fopen</code>为off和<code>allow_url_include</code>为on为本地文件包含漏洞。</p><a id="more"></a><h2 id="0x02-漏洞成因"><a href="#0x02-漏洞成因" class="headerlink" title="0x02 漏洞成因"></a>0x02 漏洞成因</h2><p>文件包含漏洞的产生原因是通过引入文件时，由于传入的文件名没有经过合理的校验，或者校验被绕过，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意代码注入。当被包含的文件在服务器本地时，就形成本地文件包含漏洞。</p><h2 id="0x03-实例分析"><a href="#0x03-实例分析" class="headerlink" title="0x03 实例分析"></a>0x03 实例分析</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if ($_GET['func']) {</span><br><span class="line">   include $_GET['func'];</span><br><span class="line">} else {</span><br><span class="line">   include 'default.php';</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序的本意可能是当提交url为<code>http://example.com/index.php?func=add.php</code>时，调用add.php里面的样式内容和功能。直接访问<code>http://example.com/index.php</code>则会包含默认的default.php。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-漏洞简介&quot;&gt;&lt;a href=&quot;#0x01-漏洞简介&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞简介&quot;&gt;&lt;/a&gt;0x01 漏洞简介&lt;/h2&gt;&lt;p&gt;如果允许客户端输入控制动态包含在服务器端的文件，会导致恶意代码的执行与敏感信息的泄露。文件包含通常分为本地文件包含（&lt;code&gt;Local File Inclusion&lt;/code&gt;）和远程文件包含(&lt;code&gt;Remote File Inclusion&lt;/code&gt;)。&lt;code&gt;allow_url_fopen&lt;/code&gt;和&lt;code&gt;allow_url_include&lt;/code&gt;为on的情况认为是远程文件包含漏洞，&lt;code&gt;allow_url_fopen&lt;/code&gt;为off和&lt;code&gt;allow_url_include&lt;/code&gt;为on为本地文件包含漏洞。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
    
      <category term="文件包含" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
</feed>
